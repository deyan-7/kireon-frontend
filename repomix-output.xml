This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.json, **/.*svg
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    build-check.yml
public/
  assets/
    images/
      agent-logo.svg
      ava_logo.svg
      deyan7_logo.svg
      icon_paperplane.svg
      logo.svg
  images/
    icon_ai-agent-masterclass.svg
    icon_bilderquiz.svg
    icon_coding_challenge.svg
    icon_evaluate_all.svg
    icon_generative_ai.svg
src/
  app/
    [locale]/
      conversation/
        [...conversationId]/
          layout.tsx
          page.tsx
      signin/
        layout.tsx
        page.tsx
      layout.tsx
      page.tsx
  client/
    client.gen.ts
    index.ts
    sdk.gen.ts
    types.gen.ts
  components/
    ArtifactActionButton.module.scss
    ArtifactActionButton.tsx
    ArtifactEditor.module.scss
    ArtifactEditor.tsx
    ArtifactEval.tsx
    ArtifactForm.tsx
    ArtifactHeader.module.scss
    ArtifactHeader.tsx
    ArtifactLoading.module.scss
    ArtifactLoading.tsx
    ArtifactMarkdown.tsx
    ArtifactTaskInstruction.tsx
    ArtifactTimeline.module.scss
    ArtifactTimeline.tsx
    ArtifactView.module.scss
    ArtifactView.tsx
    BaseLayout.tsx
    ChatMessage.module.scss
    ChatMessage.tsx
    ConversationChat.module.scss
    ConversationChat.tsx
    LegalLinks.tsx
    Protected.tsx
    ScrollDownButton.module.scss
    ScrollDownButton.tsx
    SendMessageInput.tsx
    SignIn.module.scss
    SignIn.tsx
    SplitView.module.scss
    SplitView.tsx
    StartGuest.tsx
    TextInput.module.scss
    TextInput.tsx
  context/
    AgentStreamProvider.tsx
    AuthContext.tsx
    TaskContext.tsx
  domain/
    artifact.ts
    constants.ts
    conversation.ts
    custom-highlight.ts
    custom-keymaping.ts
    custom-math-block.ts
    custom-tab-extension.ts
    markdown-service.ts
    persistent-code-block.ts
  i18n/
    navigation.ts
    request.ts
    routing.ts
  lib/
    hooks/
      useAgentStream.ts
      useAuthGuard.ts
      useLocale.ts
      useNormalizedParam.ts
    api.ts
    auth.ts
  styles/
    custom.scss
    globals.css
  types/
    generic.ts
  utils/
    asset.tsx
  config.ts
  middleware.ts
.dockerignore
.env.example
.env.local
.gitignore
docker-compose.yaml
Dockerfile
eslint.config.mjs
next.config.ts
openapi-ts.config.ts
postcss.config.mjs
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.local">
NEXT_PUBLIC_BACKEND_URL=http://localhost:8080
</file>

<file path=".github/workflows/build-check.yml">
name: Build Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Check for missing packages
      run: |
        echo "Checking for missing packages..."
        yarn check --verify-tree || (echo "Missing packages detected. Run 'yarn install' to fix." && exit 1)
        
    - name: Run ESLint
      run: yarn lint
      
    - name: Run TypeScript type checking
      run: npx tsc --noEmit
      
    - name: Build project
      run: yarn build
      
    - name: Build check completed successfully
      run: echo "✅ All checks passed! yarn build would complete without errors."
</file>

<file path="public/assets/images/agent-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" id="ai-brain" viewBox="0 0 64 64">
  <path d="m59.49,37.59l-5.01-7.3c-.08-5.59-2.42-10.95-6.44-14.77-4.05-3.84-9.33-5.79-14.87-5.5-10.53.56-18.94,9.41-19.16,20.15-.12,5.76,2.15,11.29,6.24,15.28l-2.11,6.14c-.83,2.42-.44,5.1,1.04,7.17,1.46,2.05,3.73,3.23,6.23,3.23h10.16c3.08,0,5.76-2.12,6.51-5.17l.62-2.52,3.03.56c1.91.35,3.87-.16,5.38-1.41,1.54-1.28,2.43-3.18,2.43-5.2v-5.11l4.33-1.1c.9-.23,1.64-.89,1.97-1.77.34-.89.22-1.89-.32-2.68Z" style="fill:#3df2e1"></path>
  <g>
    <path d="M27 2c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1V3c0-.55-.45-1-1-1ZM21 2c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1V3c0-.55-.45-1-1-1ZM15 2c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1V3c0-.55-.45-1-1-1ZM27 29c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1v-5c0-.55-.45-1-1-1ZM21 29c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1v-5c0-.55-.45-1-1-1ZM15 29c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1s1-.45 1-1v-5c0-.55-.45-1-1-1ZM37 24h-5c-.55 0-1 .45-1 1s.45 1 1 1h5c.55 0 1-.45 1-1s-.45-1-1-1ZM37 18h-5c-.55 0-1 .45-1 1s.45 1 1 1h5c.55 0 1-.45 1-1s-.45-1-1-1ZM32 14h5c.55 0 1-.45 1-1s-.45-1-1-1h-5c-.55 0-1 .45-1 1s.45 1 1 1ZM10 24h-5c-.55 0-1 .45-1 1s.45 1 1 1h5c.55 0 1-.45 1-1s-.45-1-1-1ZM10 18h-5c-.55 0-1 .45-1 1s.45 1 1 1h5c.55 0 1-.45 1-1s-.45-1-1-1ZM10 12h-5c-.55 0-1 .45-1 1s.45 1 1 1h5c.55 0 1-.45 1-1s-.45-1-1-1Z" style="fill:#085a8c"></path>
  </g>
  <rect width="24" height="24" x="9" y="7" rx="1" ry="1" style="fill:#0fb2f3"></rect>
  <g>
    <path d="M18.93 13.63c-.15-.38-.52-.63-.93-.63s-.78.25-.93.63l-4 10c-.21.51.04 1.09.56 1.3.52.21 1.09-.04 1.3-.56l.96-2.39s.07.02.11.02h4s.07-.02.11-.02l.96 2.39c.16.39.53.63.93.63.12 0 .25-.02.37-.07.51-.21.76-.79.56-1.3l-4-10Zm-2.25 6.37 1.32-3.31 1.32 3.31h-2.65ZM28 23h-.5v-8h.5c.55 0 1-.45 1-1s-.45-1-1-1h-3c-.55 0-1 .45-1 1s.45 1 1 1h.5v8h-.5c-.55 0-1 .45-1 1s.45 1 1 1h3c.55 0 1-.45 1-1s-.45-1-1-1Z" style="fill:#fff"></path>
  </g>
  <path d="M42.18 44.03c-5.95 5.71-7.64 14.87-8.06 17.97h-2.02c.37-3.09 2.05-13.03 8.7-19.41.4-.38 1.03-.37 1.41.03.38.4.37 1.03-.03 1.41ZM26.54 62h-1.14c-.34 0-.68-.02-1.01-.07.93-2.08 3.72-9.08 2.94-15.85-.07-.54.33-1.04.87-1.1.56-.07 1.05.33 1.11.87.78 6.66-1.57 13.29-2.77 16.15Z" style="fill:#fff"></path>
  <g>
    <circle cx="43" cy="42" r="3" style="fill:#0fb2f3"></circle>
    <circle cx="28" cy="44" r="3" style="fill:#0fb2f3"></circle>
  </g>
</svg>
</file>

<file path="public/assets/images/ava_logo.svg">
<svg width="26" height="10" viewBox="0 0 26 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_130_346)">
<path d="M20.9247 2.30811L18.9797 6.63038H22.8332L20.9247 2.30811ZM24.3677 10L23.4547 7.94774H18.3909L17.4682 10H15.8417L20.309 0H21.5289L25.9981 10H24.36H24.3658H24.3677Z" fill="#FE5000"/>
<path d="M5.08491 2.30811L3.13995 6.63038H6.99343L5.08491 2.30811ZM8.526 10L7.61298 7.94774H2.55109L1.62848 10H0L4.4692 0H5.68912L10.1583 10H8.52025H8.526Z" fill="#FE5000"/>
<path d="M16.6626 0H18.2892L13.82 10H12.1934L16.6626 0Z" fill="#FE5000"/>
<path d="M13.8066 10H12.18L7.70889 0H9.33545L13.8046 10H13.8066Z" fill="#FE5000"/>
</g>
<defs>
<clipPath id="clip0_130_346">
<rect width="26" height="10" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/assets/images/deyan7_logo.svg">
<svg width="93" height="26" viewBox="0 0 93 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_127_252)">
<mask id="mask0_127_252" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="93" height="26">
<path d="M93 0H0V26H93V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_127_252)">
<path d="M82.9166 5.65527V7.9174H90.7577L83.1538 25.9999H85.3961L93 7.9174V5.65527H82.9166Z" fill="#E44200"/>
<path d="M13.4612 13.0434L13.4469 23.7378H5.60583V25.9999H15.6892V5.65527H13.4469L13.4612 13.0434Z" fill="#E44200"/>
<path d="M10.0905 15.8276H5.60583V20.3519H10.0905V15.8276Z" fill="#E44200"/>
<path d="M7.84104 0V10.1723L0 10.1578V20.3447H2.24235V12.4345H10.0834V2.26213H15.6893V0H7.84822H7.84104Z" fill="#E44200"/>
<path d="M78.4319 20.3446L71.7121 9.80976V20.3446H69.4697V5.65527H71.7121L78.4319 16.1901L78.4176 5.65527H80.6743V20.3519H78.4319V20.3446Z" fill="white"/>
<path d="M60.7951 9.04127L58.1143 15.3926H63.4255L60.7951 9.04127ZM65.5385 20.3447L64.2808 17.3285H57.3022L56.0301 20.3447H53.7877L59.947 5.64807H61.6288L67.788 20.3447H65.5313H65.5385Z" fill="white"/>
<path d="M50.9847 20.3447H48.7424L50.9416 15.1026L46.5 5.64807H48.7424L52.0628 12.4272L54.9016 5.64807H57.144L50.9847 20.3447Z" fill="white"/>
<path d="M35.2955 20.3446V5.65527H44.804V7.69989H37.5379V11.9921H43.6972V14.015H37.5379V18.3073H44.804V20.3519H35.2955V20.3446Z" fill="white"/>
<path d="M30.0059 8.7077C29.3806 8.01166 28.5397 7.69989 27.476 7.69989H24.6659V18.3073H27.476C28.5397 18.3073 29.3806 17.9882 30.0059 17.2994C30.7821 16.4366 30.7964 14.9721 30.7964 12.9057C30.7964 10.8393 30.7749 9.585 30.0059 8.7222M31.5511 18.938C30.6096 19.8878 29.2512 20.3519 27.706 20.3519H22.4092V5.65527H27.706C29.2512 5.65527 30.6096 6.1193 31.5511 7.0691C33.161 8.6932 33.0532 10.7306 33.0532 12.8984C33.0532 15.0663 33.161 17.3139 31.5511 18.938Z" fill="white"/>
</g>
</g>
<defs>
<clipPath id="clip0_127_252">
<rect width="93" height="26" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/assets/images/icon_paperplane.svg">
<svg width="21" height="19" viewBox="0 0 21 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2.19808 1.53397L18.5001 9.49997L2.19808 17.466C2.10503 17.5017 2.00345 17.509 1.90623 17.487C1.80902 17.4649 1.72056 17.4144 1.65208 17.342C1.5816 17.2676 1.53308 17.1752 1.51189 17.0749C1.49071 16.9747 1.4977 16.8705 1.53208 16.774L4.00008 9.49997L1.53208 2.22597C1.4977 2.12944 1.49071 2.02528 1.51189 1.92503C1.53308 1.82478 1.5816 1.73234 1.65208 1.65797C1.72056 1.58552 1.80902 1.53506 1.90623 1.51298C2.00345 1.4909 2.10503 1.49821 2.19808 1.53397Z" stroke="#58D8FF" stroke-width="1.5" stroke-linecap="round"/>
<path d="M4.00009 9.5H18.5001" stroke="#58D8FF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="public/assets/images/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96" id="ai-brain">
  <g>
    <g>
      <path fill="#40e0d0" d="M48,24.37V35H39a4,4,0,0,0-4,4V57a4,4,0,0,0,4,4h9V71.63A12.22,12.22,0,0,1,24.8,77a11.81,11.81,0,0,1-2.87.34,12.09,12.09,0,0,1-4.89-1A12.22,12.22,0,0,1,9.7,65.11,12.51,12.51,0,0,1,10,62.57,12.22,12.22,0,0,1,12.6,40.41,12.21,12.21,0,0,1,21.93,20.3a11.92,11.92,0,0,1,2.25.21A12.22,12.22,0,0,1,48,24.37Z"></path>
      <path fill="#fff" d="M34.83,81.69a12.11,12.11,0,0,1-4-4.7,11.81,11.81,0,0,1-2.87.34,12.09,12.09,0,0,1-4.89-1,12.22,12.22,0,0,1-7.34-11.2,12.51,12.51,0,0,1,.26-2.54,12.22,12.22,0,0,1,2.64-22.16A12.21,12.21,0,0,1,27.91,20.3a11.92,11.92,0,0,1,2.25.21,12.24,12.24,0,0,1,8.58-8,12.07,12.07,0,0,0-3-.38,12.23,12.23,0,0,0-11.6,8.36,11.92,11.92,0,0,0-2.25-.21A12.21,12.21,0,0,0,12.6,40.41,12.22,12.22,0,0,0,10,62.57a12.51,12.51,0,0,0-.26,2.54A12.22,12.22,0,0,0,17,76.31a12.09,12.09,0,0,0,4.89,1A11.81,11.81,0,0,0,24.8,77a12.15,12.15,0,0,0,14,6.48A12.14,12.14,0,0,1,34.83,81.69Z" opacity=".4"></path>
      <path fill="#633a82" d="M57,35H39a4,4,0,0,0-4,4V57a4,4,0,0,0,4,4H57a4,4,0,0,0,4-4V39A4,4,0,0,0,57,35ZM51,53.5H45a2,2,0,0,1-2-2v-7a2,2,0,0,1,2-2h6a2,2,0,0,1,2,2v7A2,2,0,0,1,51,53.5Z"></path>
      <rect width="10" height="11" x="43" y="42.5" fill="#f1fcfc" rx="2"></rect>
      <path fill="#40e0d0" d="M86,62.57a12.51,12.51,0,0,1,.26,2.54A12.22,12.22,0,0,1,79,76.31a12.09,12.09,0,0,1-4.89,1A11.81,11.81,0,0,1,71.2,77,12.22,12.22,0,0,1,48,71.63V61h9a4,4,0,0,0,4-4V39a4,4,0,0,0-4-4H48V24.37a12.22,12.22,0,0,1,23.82-3.86,11.92,11.92,0,0,1,2.25-.21A12.21,12.21,0,0,1,83.4,40.41,12.22,12.22,0,0,1,86,62.57Z"></path>
      <path d="M92,52.07a12.21,12.21,0,0,0-8.6-11.66A12.21,12.21,0,0,0,74.07,20.3a11.92,11.92,0,0,0-2.25.21,12.23,12.23,0,0,0-11.6-8.36,11.86,11.86,0,0,0-3,.39,12.24,12.24,0,0,1,8.56,8A11.92,11.92,0,0,1,68,20.3a12.21,12.21,0,0,1,9.33,20.11A12.22,12.22,0,0,1,80,62.57a12.51,12.51,0,0,1,.26,2.54,12.22,12.22,0,0,1-7.34,11.2,12.09,12.09,0,0,1-4.89,1A11.81,11.81,0,0,1,65.16,77a12.22,12.22,0,0,1-7.94,6.47,11.86,11.86,0,0,0,3,.39A12.24,12.24,0,0,0,71.2,77a11.81,11.81,0,0,0,2.87.34,12.09,12.09,0,0,0,4.89-1,12.22,12.22,0,0,0,7.34-11.2A12.51,12.51,0,0,0,86,62.57,12.23,12.23,0,0,0,92,52.07Z" opacity=".2"></path>
      <circle cx="71.16" cy="32.08" r="4.5" fill="#633a82"></circle>
      <circle cx="73.18" cy="63.96" r="4.5" fill="#633a82"></circle>
      <circle cx="16.52" cy="55.5" r="4.5" fill="#633a82"></circle>
      <circle cx="27.92" cy="28.22" r="4.5" fill="#633a82"></circle>
      <path fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M48,71.63A12.22,12.22,0,0,1,24.8,77a11.81,11.81,0,0,1-2.87.34,12.09,12.09,0,0,1-4.89-1A12.22,12.22,0,0,1,9.7,65.11,12.51,12.51,0,0,1,10,62.57,12.22,12.22,0,0,1,12.6,40.41,12.21,12.21,0,0,1,21.93,20.3a11.92,11.92,0,0,1,2.25.21A12.22,12.22,0,0,1,48,24.37"></path>
      <path fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M57,35H39a4,4,0,0,0-4,4V57a4,4,0,0,0,4,4H57a4,4,0,0,0,4-4V39A4,4,0,0,0,57,35ZM51,53.5H45a2,2,0,0,1-2-2v-7a2,2,0,0,1,2-2h6a2,2,0,0,1,2,2v7A2,2,0,0,1,51,53.5Z"></path>
      <rect width="10" height="11" x="43" y="42.5" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" rx="2"></rect>
      <path fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M48 24.37a12.22 12.22 0 0 1 23.82-3.86 11.92 11.92 0 0 1 2.25-.21 12.2 12.2 0 0 1 12 9.8M85.58 69.24A12.26 12.26 0 0 1 79 76.31a12.09 12.09 0 0 1-4.89 1A11.81 11.81 0 0 1 71.2 77 12.22 12.22 0 0 1 48 71.63M88.51 43.53a12.21 12.21 0 0 1-2.47 19 12.51 12.51 0 0 1 .26 2.54 12 12 0 0 1-.72 4.13M86.06 30.1A12.21 12.21 0 0 1 83.4 40.41M73.18 36.1C77.56 42 83.4 40.41 83.4 40.41"></path>
      <circle cx="71.16" cy="32.08" r="4.5" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></circle>
      <circle cx="73.18" cy="63.96" r="4.5" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></circle>
      <circle cx="16.52" cy="55.5" r="4.5" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></circle>
      <circle cx="27.92" cy="28.22" r="4.5" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></circle>
      <line x1="41.43" x2="41.43" y1="29.08" y2="35" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="48" x2="48" y1="29.08" y2="35" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="54.57" x2="54.57" y1="29.08" y2="35" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="61" x2="66.92" y1="53.74" y2="53.74" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="61" x2="66.92" y1="47.17" y2="47.17" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="61" x2="66.92" y1="40.6" y2="40.6" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="29.02" x2="34.94" y1="53.8" y2="53.8" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="29.02" x2="34.94" y1="47.23" y2="47.23" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="29.02" x2="34.94" y1="40.66" y2="40.66" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="41.43" x2="41.43" y1="61" y2="66.92" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="48" x2="48" y1="61" y2="66.92" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <line x1="54.57" x2="54.57" y1="61" y2="66.92" fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"></line>
      <path fill="none" stroke="#192965" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M12.6 40.41s8.86 2.88 5.86 11M25.62 24.36a6.54 6.54 0 0 1-1.44-3.85M24.8 77S22.9 70.66 26 66.34M74.3 68.31c-.1 4.4-3.1 8.68-3.1 8.68M86 62.57s-6.12-1.93-2.64-9.73M24.22 72.65S31.8 77.56 37 70.84M70 79s-4.36-7.7-11.56-2"></path>
    </g>
  </g>
</svg>
</file>

<file path="public/images/icon_ai-agent-masterclass.svg">
<svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18.5315 12.0659C19.3425 12.0659 20 11.4124 20 10.6063C20 9.80012 19.3425 9.14661 18.5315 9.14661C17.7205 9.14661 17.063 9.80012 17.063 10.6063C17.063 11.4124 17.7205 12.0659 18.5315 12.0659Z" stroke="#FE5000" stroke-miterlimit="10"/>
<path d="M15.9456 10.6062H11.1077" stroke="white" stroke-miterlimit="10"/>
<path d="M11.0473 7.13707H13.0187L14.9397 4.50769" stroke="white" stroke-miterlimit="10"/>
<path d="M11.0473 14.0754H13.0187L14.9397 16.7048" stroke="white" stroke-miterlimit="10"/>
<path d="M16.5199 3.91931C17.3309 3.91931 17.9884 3.2658 17.9884 2.45966C17.9884 1.65351 17.3309 1 16.5199 1C15.7089 1 15.0515 1.65351 15.0515 2.45966C15.0515 3.2658 15.7089 3.91931 16.5199 3.91931Z" stroke="#FE5000" stroke-miterlimit="10"/>
<path d="M16.5199 20.2125C17.3309 20.2125 17.9884 19.559 17.9884 18.7529C17.9884 17.9467 17.3309 17.2932 16.5199 17.2932C15.7089 17.2932 15.0515 17.9467 15.0515 18.7529C15.0515 19.559 15.7089 20.2125 16.5199 20.2125Z" stroke="#FE5000" stroke-miterlimit="10"/>
<path d="M6.47158 14.6054C5.69711 15.1153 5.19421 15.9951 5.19421 16.9849C5.19421 18.5645 6.48164 19.8542 8.08086 19.8542C9.68008 19.8542 10.9675 18.5745 10.9675 16.9849V4.22785C10.9675 2.64822 9.68008 1.35852 8.08086 1.35852C6.48164 1.35852 5.19421 2.63822 5.19421 4.22785C5.19421 5.21762 5.70717 6.09741 6.47158 6.60729" stroke="white" stroke-miterlimit="10" stroke-linecap="square"/>
<path d="M6.23016 11.546C6.23016 10.1064 5.05338 8.94666 3.61508 8.94666C2.17679 8.94666 1 10.1164 1 11.546C1 12.6558 1.694 13.5856 2.66963 13.9655C2.28742 14.3454 2.05609 14.8653 2.05609 15.4451C2.05609 16.6149 3.0116 17.5546 4.17833 17.5546C4.4499 17.5546 4.70135 17.5046 4.94274 17.4147" stroke="white" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M4.90248 3.27808C3.69552 3.27808 2.72995 4.24785 2.72995 5.43757C2.72995 5.81748 2.83053 6.1674 3.00151 6.46733C2.1667 6.72727 1.55316 7.48709 1.55316 8.40687C1.55316 8.77679 1.65374 9.1267 1.83479 9.42663" stroke="white" stroke-linecap="square" stroke-linejoin="round"/>
</svg>
</file>

<file path="public/images/icon_bilderquiz.svg">
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.89286 17.7143H3.78571C3.0469 17.7143 2.33834 17.4208 1.81592 16.8984C1.29349 16.3759 1 15.6674 1 14.9286V3.78571C1 3.0469 1.29349 2.33834 1.81592 1.81592C2.33834 1.29349 3.0469 1 3.78571 1H14.9286C15.6674 1 16.3759 1.29349 16.8984 1.81592C17.4208 2.33834 17.7143 3.0469 17.7143 3.78571V8.89286" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11.9286 14.8213C11.9286 15.5886 12.2334 16.3244 12.7759 16.8669C13.3184 17.4094 14.0542 17.7142 14.8214 17.7142C15.5887 17.7142 16.3245 17.4094 16.867 16.8669C17.4095 16.3244 17.7143 15.5886 17.7143 14.8213C17.7143 14.0541 17.4095 13.3183 16.867 12.7758C16.3245 12.2332 15.5887 11.9285 14.8214 11.9285C14.0542 11.9285 13.3184 12.2332 12.7759 12.7758C12.2334 13.3183 11.9286 14.0541 11.9286 14.8213Z" stroke="#FE5000" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M17.0714 17.0715L19 19.0001" stroke="#FE5000" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M1 12.5713L5.5 8.03598C6.3352 7.22596 7.3648 7.22596 8.2 8.03598L10 9.85012" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="public/images/icon_coding_challenge.svg">
<svg width="20" height="18" viewBox="0 0 20 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.94115 12.2941H1.94117C1.69156 12.2941 1.45217 12.1949 1.27566 12.0184C1.09916 11.8419 1 11.6025 1 11.3529V1.94117C1 1.69156 1.09916 1.45217 1.27566 1.27566C1.45217 1.09916 1.69156 1 1.94117 1H17C17.2496 1 17.489 1.09916 17.6655 1.27566C17.842 1.45217 17.9411 1.69156 17.9411 1.94117V9.47057" stroke="white" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M4.76477 16.0588H8.52947" stroke="white" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M6.64691 12.2939V16.0586" stroke="white" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M16.9999 17L18.8823 15.1177L16.9999 13.2354" stroke="#FE5000" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M14.1767 13.2354L12.2943 15.1177L14.1767 17" stroke="#FE5000" stroke-linecap="square" stroke-linejoin="round"/>
</svg>
</file>

<file path="public/images/icon_evaluate_all.svg">
<svg width="19" height="21" viewBox="0 0 19 21" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M10 1V5C10 5.26522 10.1054 5.51957 10.2929 5.70711C10.4804 5.89464 10.7348 6 11 6H15" stroke="white" stroke-linecap="round"/>
  <path d="M8 19H3C2.46957 19 1.96086 18.7893 1.58579 18.4142C1.21071 18.0391 1 17.5304 1 17V3C1 2.46957 1.21071 1.96086 1.58579 1.58579C1.96086 1.21071 2.46957 1 3 1H10L15 6V9.5" stroke="white" stroke-linecap="square"/>
  <line x1="5" y1="14" x2="5" y2="9" stroke="white" stroke-linecap="round"/>
  <line x1="9" y1="14" x2="9" y2="7" stroke="white" stroke-linecap="round"/>
  <line x1="13" y1="14" x2="13" y2="11" stroke="white" stroke-linecap="round"/>
  <polyline points="5,12 9,10 13,12" stroke="white" fill="none" stroke-linecap="round"/>
  <path d="M15 20.5C15.2053 19.6513 15.6406 18.8755 16.2581 18.2581C16.8755 17.6406 17.6513 17.2053 18.5 17C17.6513 16.7947 16.8755 16.3594 16.2581 15.7419C15.6406 15.1245 15.2053 14.3487 15 13.5C14.7947 14.3487 14.3594 15.1245 13.7419 15.7419C13.1245 16.3594 12.3487 16.7947 11.5 17C12.3487 17.2053 13.1245 17.6406 13.7419 18.2581C14.3594 18.8755 14.7947 19.6513 15 20.5Z" stroke="#FE5000" stroke-linecap="round"/>
</svg>
</file>

<file path="public/images/icon_generative_ai.svg">
<svg width="19" height="21" viewBox="0 0 19 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 1V5C10 5.26522 10.1054 5.51957 10.2929 5.70711C10.4804 5.89464 10.7348 6 11 6H15" stroke="white" stroke-linecap="round"/>
<path d="M8 19H3C2.46957 19 1.96086 18.7893 1.58579 18.4142C1.21071 18.0391 1 17.5304 1 17V3C1 2.46957 1.21071 1.96086 1.58579 1.58579C1.96086 1.21071 2.46957 1 3 1H10L15 6V9.5" stroke="white" stroke-linecap="square"/>
<path d="M5 7H6" stroke="white" stroke-linecap="square"/>
<path d="M5 11H11" stroke="white" stroke-linecap="square"/>
<path d="M5 15H8" stroke="white" stroke-linecap="square"/>
<path d="M15 20.5C15.2053 19.6513 15.6406 18.8755 16.2581 18.2581C16.8755 17.6406 17.6513 17.2053 18.5 17C17.6513 16.7947 16.8755 16.3594 16.2581 15.7419C15.6406 15.1245 15.2053 14.3487 15 13.5C14.7947 14.3487 14.3594 15.1245 13.7419 15.7419C13.1245 16.3594 12.3487 16.7947 11.5 17C12.3487 17.2053 13.1245 17.6406 13.7419 18.2581C14.3594 18.8755 14.7947 19.6513 15 20.5Z" stroke="#FE5000" stroke-linecap="round"/>
</svg>
</file>

<file path="src/app/[locale]/conversation/[...conversationId]/layout.tsx">
import SplitView from "@/components/SplitView";

export default function ChatLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <SplitView>{children}</SplitView>;
}
</file>

<file path="src/app/[locale]/conversation/[...conversationId]/page.tsx">
"use client";

import ConversationChat from "@/components/ConversationChat";
import Protected from "@/components/Protected";

const ConversationsPage: React.FC = () => {
  return (
    <Protected>
      <ConversationChat />
    </Protected>
  );
};

export default ConversationsPage;
</file>

<file path="src/app/[locale]/signin/layout.tsx">
"use client";
import { useAuthGuard } from "@/lib/hooks/useAuthGuard";
import { ReactNode } from "react";

export default function StartGuestLayout({
  children,
}: {
  children: ReactNode;
}) {
  useAuthGuard();
  return <section>{children}</section>;
}
</file>

<file path="src/app/[locale]/signin/page.tsx">
"use client";

import SignInPage from "@/components/SignIn";

const StartGuestPage: React.FC = () => {
  return <SignInPage />;
};

export default StartGuestPage;
</file>

<file path="src/app/[locale]/layout.tsx">
import type { Metadata } from "next";
import "@/styles/globals.css";
import "@/styles/custom.scss";
import "highlight.js/styles/github.css";

import { AuthProvider } from "@/context/AuthContext";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import { AgentStreamProvider } from "@/context/AgentStreamProvider";
import { TaskProvider } from "@/context/TaskContext";

export const metadata: Metadata = {
  title: "Deyan7 - AVA",
  description: "AVA AI Engineering Challenge",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }
  return (
    <html lang={locale}>
      <body>
        <NextIntlClientProvider>
          <AuthProvider>
            <TaskProvider>
              <AgentStreamProvider>{children}</AgentStreamProvider>
            </TaskProvider>
          </AuthProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/[locale]/page.tsx">
"use client";

import Protected from "@/components/Protected";
import StartGuest from "@/components/StartGuest";

const StartGuestPage: React.FC = () => {
  return (
    <Protected>
      <StartGuest />
    </Protected>
  );
};

export default StartGuestPage;
</file>

<file path="src/client/client.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

import type { ClientOptions } from "./types.gen";
import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig,
} from "@hey-api/client-fetch";

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
  (
    override?: Config<DefaultClientOptions & T>
  ) => Config<Required<DefaultClientOptions> & T>;

export const client = createClient(
  createConfig<ClientOptions>({
    baseUrl:
      process.env.NEXT_PUBLIC_BACKEND_URL ||
      "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app",
  })
);
</file>

<file path="src/client/index.ts">
// This file is auto-generated by @hey-api/openapi-ts
export * from './types.gen';
export * from './sdk.gen';
</file>

<file path="src/client/sdk.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { InfoInfoGetData, InfoInfoGetResponse, InvokeInvokePostData, InvokeInvokePostResponse, InvokeInvokePostError, InvokeAgentIdInvokePostData, InvokeAgentIdInvokePostResponse, InvokeAgentIdInvokePostError, StreamStreamPostData, StreamStreamPostResponse, StreamStreamPostError, StreamAgentIdStreamPostData, StreamAgentIdStreamPostResponse, StreamAgentIdStreamPostError, FeedbackFeedbackPostData, FeedbackFeedbackPostResponse, FeedbackFeedbackPostError, HistoryHistoryPostData, HistoryHistoryPostResponse, HistoryHistoryPostError, HealthCheckHealthGetData, ReadinessReadinessGetData, ReadinessReadinessGetResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Info
 */
export const infoInfoGet = <ThrowOnError extends boolean = false>(options?: Options<InfoInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InfoInfoGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/info',
        ...options
    });
};

/**
 * Invoke
 * Invoke an agent with user input to retrieve a final response.
 *
 * If agent_id is not provided, the default agent will be used.
 * Use thread_id to persist and continue a multi-turn conversation. run_id kwarg
 * is also attached to messages for recording feedback.
 * Use user_id to persist and continue a conversation across multiple threads.
 */
export const invokeInvokePost = <ThrowOnError extends boolean = false>(options: Options<InvokeInvokePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvokeInvokePostResponse, InvokeInvokePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Invoke
 * Invoke an agent with user input to retrieve a final response.
 *
 * If agent_id is not provided, the default agent will be used.
 * Use thread_id to persist and continue a multi-turn conversation. run_id kwarg
 * is also attached to messages for recording feedback.
 * Use user_id to persist and continue a conversation across multiple threads.
 */
export const invokeAgentIdInvokePost = <ThrowOnError extends boolean = false>(options: Options<InvokeAgentIdInvokePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvokeAgentIdInvokePostResponse, InvokeAgentIdInvokePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/{agent_id}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stream
 * Stream an agent's response to a user input, including intermediate messages and tokens.
 *
 * If agent_id is not provided, the default agent will be used.
 * Use thread_id to persist and continue a multi-turn conversation. run_id kwarg
 * is also attached to all messages for recording feedback.
 * Use user_id to persist and continue a conversation across multiple threads.
 *
 * Set `stream_tokens=false` to return intermediate messages but not token-by-token.
 */
export const streamStreamPost = <ThrowOnError extends boolean = false>(options: Options<StreamStreamPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreamStreamPostResponse, StreamStreamPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stream
 * Stream an agent's response to a user input, including intermediate messages and tokens.
 *
 * If agent_id is not provided, the default agent will be used.
 * Use thread_id to persist and continue a multi-turn conversation. run_id kwarg
 * is also attached to all messages for recording feedback.
 * Use user_id to persist and continue a conversation across multiple threads.
 *
 * Set `stream_tokens=false` to return intermediate messages but not token-by-token.
 */
export const streamAgentIdStreamPost = <ThrowOnError extends boolean = false>(options: Options<StreamAgentIdStreamPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreamAgentIdStreamPostResponse, StreamAgentIdStreamPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/{agent_id}/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Feedback
 * Record feedback for a run to LangSmith.
 *
 * This is a simple wrapper for the LangSmith create_feedback API, so the
 * credentials can be stored and managed in the service rather than the client.
 * See: https://api.smith.langchain.com/redoc#tag/feedback/operation/create_feedback_api_v1_feedback_post
 */
export const feedbackFeedbackPost = <ThrowOnError extends boolean = false>(options: Options<FeedbackFeedbackPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FeedbackFeedbackPostResponse, FeedbackFeedbackPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * History
 * Get chat history.
 */
export const historyHistoryPost = <ThrowOnError extends boolean = false>(options: Options<HistoryHistoryPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HistoryHistoryPostResponse, HistoryHistoryPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Readiness
 * Readiness check endpoint.
 */
export const readinessReadinessGet = <ThrowOnError extends boolean = false>(options?: Options<ReadinessReadinessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadinessReadinessGetResponse, unknown, ThrowOnError>({
        url: '/readiness',
        ...options
    });
};
</file>

<file path="src/client/types.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

/**
 * https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html
 */
export type AwsModelName = "bedrock-3.5-haiku" | "bedrock-3.5-sonnet";

/**
 * Info about an available agent.
 */
export type AgentInfo = {
  /**
   * Agent key.
   */
  key: string;
  /**
   * Description of the agent.
   */
  description: string;
};

/**
 * https://docs.anthropic.com/en/docs/about-claude/models#model-names
 */
export type AnthropicModelName =
  | "claude-3-haiku"
  | "claude-3.5-haiku"
  | "claude-3.5-sonnet";

/**
 * Azure OpenAI model names
 */
export type AzureOpenAiModelName = "azure-gpt-4o" | "azure-gpt-4o-mini";

export type ChatHistory = {
  messages: Array<ChatMessage>;
};

/**
 * Input for retrieving chat history.
 */
export type ChatHistoryInput = {
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id: string;
};

/**
 * Message in a chat.
 */
export type ChatMessage = {
  /**
   * Role of the message.
   */
  type: "human" | "ai" | "tool" | "custom" | "system";
  /**
   * Content of the message.
   */
  content: string;
  /**
   * Tool calls in the message.
   */
  tool_calls?: Array<ToolCall>;
  /**
   * Tool call that this message is responding to.
   */
  tool_call_id?: string | null;
  /**
   * Run ID of the message.
   */
  run_id?: string | null;
  /**
   * Response metadata. For example: response headers, logprobs, token counts.
   */
  response_metadata?: {
    [key: string]: unknown;
  };
  /**
   * Custom message data.
   */
  custom_data?: {
    [key: string]: unknown;
  };
};

/**
 * https://api-docs.deepseek.com/quick_start/pricing
 */
export type DeepseekModelName = "deepseek-chat";

/**
 * Fake model for testing.
 */
export type FakeModelName = "fake";

/**
 * Feedback for a run, to record to LangSmith.
 */
export type Feedback = {
  /**
   * Run ID to record feedback for.
   */
  run_id: string;
  /**
   * Feedback key.
   */
  key: string;
  /**
   * Feedback score.
   */
  score: number;
  /**
   * Additional feedback kwargs, passed to LangSmith.
   */
  kwargs?: {
    [key: string]: unknown;
  };
};

export type FeedbackResponse = {
  status?: "success";
};

/**
 * https://ai.google.dev/gemini-api/docs/models/gemini
 */
export type GoogleModelName = "gemini-1.5-pro" | "gemini-2.0-flash";

/**
 * https://console.groq.com/docs/models
 */
export type GroqModelName =
  | "llama-3.1-8b"
  | "llama-3.3-70b"
  | "meta-llama/llama-guard-4-12b";

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * https://ollama.com/search
 */
export type OllamaModelName = "ollama";

/**
 * https://platform.openai.com/docs/guides/text-generation
 */
export type OpenAiCompatibleName = "openai-compatible";

/**
 * https://platform.openai.com/docs/models/gpt-4o
 */
export type OpenAiModelName = "gpt-4o-mini" | "gpt-4o";

/**
 * Metadata about the service including available agents and models.
 */
export type ServiceMetadata = {
  /**
   * List of available agents.
   */
  agents: Array<AgentInfo>;
  /**
   * List of available LLMs.
   */
  models: Array<
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
  >;
  /**
   * Default agent used when none is specified.
   */
  default_agent: string;
  /**
   * Default model used when none is specified.
   */
  default_model:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName;
};

/**
 * User input for streaming the agent's response.
 */
export type StreamInput = {
  /**
   * User input to the agent.
   */
  message: string;
  /**
   * LLM Model to use for the agent.
   */
  model?:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
    | null;
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id?: string | null;
  /**
   * User ID to persist and continue a conversation across multiple threads.
   */
  user_id?: string | null;
  /**
   * Additional configuration to pass through to the agent
   */
  agent_config?: {
    [key: string]: unknown;
  };
  /**
   * Whether to stream LLM tokens to the client.
   */
  stream_tokens?: boolean;
};

/**
 * Represents a request to call a tool.
 */
export type ToolCall = {
  name: string;
  args: {
    [key: string]: unknown;
  };
  id: string | null;
  type?: "tool_call";
};

/**
 * Basic user input for the agent.
 */
export type UserInput = {
  /**
   * User input to the agent.
   */
  message: string;
  /**
   * LLM Model to use for the agent.
   */
  model?:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
    | null;
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id?: string | null;
  /**
   * User ID to persist and continue a conversation across multiple threads.
   */
  user_id?: string | null;
  /**
   * Additional configuration to pass through to the agent
   */
  agent_config?: {
    [key: string]: unknown;
  };
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

/**
 * https://ai.google.dev/gemini-api/docs/models/gemini
 */
export type VertexAiModelName =
  | "gemini-1.5-pro-002"
  | "gemini-2.0-flash"
  | "models/gemini-2.5-flash-preview-04-17"
  | "gemini-2.5-pro-preview-05-06"
  | "gemini-2.5-pro-exp-03-25";

export type InfoInfoGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/info";
};

export type InfoInfoGetResponses = {
  /**
   * Successful Response
   */
  200: ServiceMetadata;
};

export type InfoInfoGetResponse =
  InfoInfoGetResponses[keyof InfoInfoGetResponses];

export type InvokeInvokePostData = {
  body: UserInput;
  path?: never;
  query?: {
    agent_id?: string;
  };
  url: "/invoke";
};

export type InvokeInvokePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type InvokeInvokePostError =
  InvokeInvokePostErrors[keyof InvokeInvokePostErrors];

export type InvokeInvokePostResponses = {
  /**
   * Successful Response
   */
  200: ChatMessage;
};

export type InvokeInvokePostResponse =
  InvokeInvokePostResponses[keyof InvokeInvokePostResponses];

export type InvokeAgentIdInvokePostData = {
  body: UserInput;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/{agent_id}/invoke";
};

export type InvokeAgentIdInvokePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type InvokeAgentIdInvokePostError =
  InvokeAgentIdInvokePostErrors[keyof InvokeAgentIdInvokePostErrors];

export type InvokeAgentIdInvokePostResponses = {
  /**
   * Successful Response
   */
  200: ChatMessage;
};

export type InvokeAgentIdInvokePostResponse =
  InvokeAgentIdInvokePostResponses[keyof InvokeAgentIdInvokePostResponses];

export type StreamStreamPostData = {
  body: StreamInput;
  path?: never;
  query?: {
    agent_id?: string;
  };
  url: "/stream";
};

export type StreamStreamPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StreamStreamPostError =
  StreamStreamPostErrors[keyof StreamStreamPostErrors];

export type StreamStreamPostResponses = {
  /**
   * Server Sent Event Response
   */
  200: string;
};

export type StreamStreamPostResponse =
  StreamStreamPostResponses[keyof StreamStreamPostResponses];

export type StreamAgentIdStreamPostData = {
  body: StreamInput;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/{agent_id}/stream";
};

export type StreamAgentIdStreamPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StreamAgentIdStreamPostError =
  StreamAgentIdStreamPostErrors[keyof StreamAgentIdStreamPostErrors];

export type StreamAgentIdStreamPostResponses = {
  /**
   * Server Sent Event Response
   */
  200: string;
};

export type StreamAgentIdStreamPostResponse =
  StreamAgentIdStreamPostResponses[keyof StreamAgentIdStreamPostResponses];

export type FeedbackFeedbackPostData = {
  body: Feedback;
  path?: never;
  query?: never;
  url: "/feedback";
};

export type FeedbackFeedbackPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FeedbackFeedbackPostError =
  FeedbackFeedbackPostErrors[keyof FeedbackFeedbackPostErrors];

export type FeedbackFeedbackPostResponses = {
  /**
   * Successful Response
   */
  200: FeedbackResponse;
};

export type FeedbackFeedbackPostResponse =
  FeedbackFeedbackPostResponses[keyof FeedbackFeedbackPostResponses];

export type HistoryHistoryPostData = {
  body: ChatHistoryInput;
  path?: never;
  query?: never;
  url: "/history";
};

export type HistoryHistoryPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type HistoryHistoryPostError =
  HistoryHistoryPostErrors[keyof HistoryHistoryPostErrors];

export type HistoryHistoryPostResponses = {
  /**
   * Successful Response
   */
  200: ChatHistory;
};

export type HistoryHistoryPostResponse =
  HistoryHistoryPostResponses[keyof HistoryHistoryPostResponses];

export type HealthCheckHealthGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health";
};

export type HealthCheckHealthGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ReadinessReadinessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/readiness";
};

export type ReadinessReadinessGetResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type ReadinessReadinessGetResponse =
  ReadinessReadinessGetResponses[keyof ReadinessReadinessGetResponses];

export type ClientOptions = {
  baseUrl:
    | "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app"
    | (string & {});
};
</file>

<file path="src/components/ArtifactActionButton.module.scss">
.loadingDots {
  display: inline-flex;
  gap: 4px;

  span {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: white;
    animation: loading-bounce 1.4s ease-in-out infinite both;

    &:nth-child(1) {
      animation-delay: -0.32s;
    }

    &:nth-child(2) {
      animation-delay: -0.16s;
    }
  }
}

@keyframes loading-bounce {
  0%,
  80%,
  100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}
</file>

<file path="src/components/ArtifactActionButton.tsx">
"use client";

import styles from "./ArtifactActionButton.module.scss";

type Props = {
  label: string;
  disabled: boolean;
  onAction: () => void;
  isLoading?: boolean;
};

const ArtifactActionButton = ({
  label,
  disabled,
  onAction,
  isLoading = false,
}: Props) => {
  const showLoading = isLoading;

  return (
    <div className="relative z-[2] mb-[10px] w-full">
      <div className="mx-auto container text-center">
        <button
          className="action-btn mb-3 pt-3 pb-4 w-full rounded-xl disabled:opacity-50"
          disabled={disabled || showLoading || !label}
          aria-disabled={disabled || showLoading}
          onClick={onAction}
        >
          {showLoading ? (
            <span className={styles.loadingDots}>
              <span></span>
              <span></span>
              <span></span>
            </span>
          ) : (
            label
          )}
        </button>
      </div>
    </div>
  );
};

export default ArtifactActionButton;
</file>

<file path="src/components/ArtifactEditor.module.scss">
.bubbleMenu {
  background-color: #fff;
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border-radius: 6px;
  display: flex;
  padding: 4px;
  transition: all 0.3s ease-in-out;

  button {
    height: 36px;
    width: 36px;
    border-radius: 50%;
    background-color: transparent;
    color: #4a4a4a;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease-in-out;

    &:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    &.isActive {
      background-color: #007aff;
      color: white;
    }
  }
}

.saveChangesBtn {
  background-color: black;
  color: white;
  padding: 8px 10px;
  margin-bottom: 0;
  border-radius: 4px;
  font-size: 0.875rem;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;

  &:hover {
    background-color: #333;
  }
}
</file>

<file path="src/components/ArtifactEditor.tsx">
"use client";

import { useEditor, EditorContent } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Table from "@tiptap/extension-table";
import TableRow from "@tiptap/extension-table-row";
import TableCell from "@tiptap/extension-table-cell";
import TableHeader from "@tiptap/extension-table-header";
import Image from "@tiptap/extension-image";
import Link from "@tiptap/extension-link";
import { createLowlight } from "lowlight";
import CodeBlockLowlight from "@tiptap/extension-code-block-lowlight";
import { common } from "lowlight";

import { formatHtmlMarkdown } from "@/domain/markdown-service";
import CustomHighlight from "@/domain/custom-highlight";
import MathBlock from "@/domain/custom-math-block";
import { CustomTabExtension } from "@/domain/custom-tab-extension";
import { PersistentCodeBlock } from "@/domain/persistent-code-block";
import { CodeBlockNewlineFix } from "@/domain/custom-keymaping";

type Props = {
  artifact: any;
  versions: any[];
  onModified: (updatedArtifact: any) => void;
};

const lowlight = createLowlight(common);

const ArtifactEditor = ({ artifact, onModified }: Props) => {
  const originalMarkdown =
    typeof artifact.payload === "string"
      ? artifact.payload
      : artifact.content?.artifact_content ??
        artifact.content?.task_content?.content ??
        "";

  const editor = useEditor({
    extensions: [
      StarterKit.configure({ hardBreak: false }),
      Table.configure({ resizable: true }),
      TableRow,
      TableHeader,
      PersistentCodeBlock,
      TableCell,
      CodeBlockLowlight.configure({ lowlight }),
      MathBlock,
      CustomHighlight,
      CustomTabExtension,
      Image,
      Link,
      CodeBlockNewlineFix,
    ],
    content: artifact.isCodeBlock
      ? {
          type: "doc",
          content: [
            {
              type: "codeBlock",
              attrs: { language: artifact.language || "" },
              content: [{ type: "text", text: originalMarkdown.trim() }],
            },
          ],
        }
      : originalMarkdown,
    onUpdate: ({ editor }) => {
      const html = editor.getHTML();
      const currentMarkdown = formatHtmlMarkdown(html).trim();
      onModified({
        ...artifact,
        content: currentMarkdown,
        version: (artifact.version ?? 0) + 1,
      });
    },
  });

  return (
    <div className="flex-grow markdown-chat">
      <EditorContent editor={editor} />
    </div>
  );
};

export default ArtifactEditor;
</file>

<file path="src/components/ArtifactEval.tsx">
"use client";

import { formatMarkdownHtml } from "@/domain/markdown-service";

type Props = {
  artifact: any;
};

const ArtifactEval = ({ artifact }: Props) => {
  return (
    <div className="flex flex-col h-full">
      <div
        className="flex-grow markdown-chat mb-8"
        dangerouslySetInnerHTML={{
          __html: formatMarkdownHtml(artifact.content ?? ""),
        }}
      />
    </div>
  );
};

export default ArtifactEval;
</file>

<file path="src/components/ArtifactForm.tsx">
"use client";

import {
  useEffect,
  useImperativeHandle,
  useMemo,
  useRef,
  useState,
  forwardRef,
} from "react";

import { JsonForms } from "@jsonforms/react";
import { vanillaRenderers, vanillaCells } from "@jsonforms/vanilla-renderers";
import { formatMarkdownHtml } from "@/domain/markdown-service";

type Props = {
  artifact: any;
  onModified: (val: any) => void;
};

export type ArtifactFormRef = {
  getUpdatedArtifact: () => any;
};

const ArtifactForm = forwardRef<ArtifactFormRef, Props>(
  ({ artifact, onModified }, ref) => {
    const stableString = useMemo(() => {
      return typeof artifact.content === "string"
        ? artifact.content
        : JSON.stringify(artifact.content ?? {});
    }, [artifact.content]);

    const parsedContent = useMemo(() => {
      try {
        return JSON.parse(stableString);
      } catch {
        return {};
      }
    }, [stableString]);

    const payloadArray = parsedContent.payload;
    const markdown = parsedContent.content ?? "";

    const { schema, uischema, initialData } = useMemo(() => {
      if (!Array.isArray(payloadArray)) {
        return {
          schema: { type: "object", properties: {} },
          uischema: { type: "Group", elements: [] },
          initialData: {},
        };
      }

      const properties: Record<string, any> = {};
      const ui: Record<string, any> = {};
      const formData: Record<string, any> = {};

      for (const field of payloadArray) {
        const { key, type, title, enum: enumVals, uischema, data } = field;

        if (!key) continue;

        properties[key] = {
          type,
          title,
          ...(enumVals ? { enum: enumVals } : {}),
        };

        if (uischema) {
          ui[key] = {
            type: "Control",
            scope: `#/properties/${key}`,
            options: {
              format:
                field.uischema?.["ui:widget"] === "radio" ? "radio" : undefined,
            },
          };
        }

        formData[key] = data ?? "";
      }

      return {
        schema: {
          type: "object",
          properties,
        },
        uischema: {
          type: "Group",
          elements: Object.entries(ui).map(([key, schema]) => ({
            scope: `#/properties/${key}`,
            ...schema,
          })),
        },
        initialData: formData,
      };
    }, [payloadArray]);

    const [formData, setFormData] = useState(initialData);
    const originalData = useRef(JSON.stringify(initialData));

    const buildUpdatedArtifact = (): any => ({
      ...artifact,
      payload: {
        schema,
        uischema,
        data: formData,
      },
      version: (artifact.version ?? 0) + 1,
    });

    useImperativeHandle(ref, () => ({
      getUpdatedArtifact: () => buildUpdatedArtifact(),
    }));

    useEffect(() => {
      const isModified = JSON.stringify(formData) !== originalData.current;
      if (isModified) {
        onModified(buildUpdatedArtifact());
      } else {
        onModified(null);
      }
    }, [formData]); // eslint-disable-line react-hooks/exhaustive-deps

    useEffect(() => {
      setFormData(initialData);
      originalData.current = JSON.stringify(initialData);
    }, [initialData]);

    const handleChange = ({ data }: { data: Record<string, unknown> }) => {
      setFormData(data);
    };

    return (
      <div className="flex-grow overflow-y-auto">
        {markdown && (
          <div
            className="markdown-chat mb-10"
            dangerouslySetInnerHTML={{
              __html: formatMarkdownHtml(markdown),
            }}
          />
        )}

        <JsonForms
          data={formData}
          schema={schema}
          uischema={uischema}
          cells={vanillaCells}
          renderers={vanillaRenderers}
          onChange={handleChange}
          config={{ validationMode: "NoValidation", useDefaults: true }}
        />
      </div>
    );
  }
);

ArtifactForm.displayName = "ArtifactForm";
export default ArtifactForm;
</file>

<file path="src/components/ArtifactHeader.module.scss">
.artifactHeader {
  background-color: var(--artifact-bg);
  height: 5rem;
}

.tabButton {
  background-color: var(--chat-message-bg);
  border: 1px solid var(--chat-message-bg);
  color: var(--primary-text);
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  margin-bottom: 0px;
}

.tabButton.active {
  background-color: var(--artifact-bg, #ddd);
  font-weight: bold;
}

.tabButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.headerButton {
  transition: all 0.2s ease;
  padding: 0.5rem;
  border-radius: 0.375rem;
  background-color: transparent;
  border: none;
  
  &:hover {
    background-color: transparent;
    
    svg {
      color: white;
    }
  }
}

.headerLink {
  transition: all 0.2s ease;
  padding: 0.5rem;
  border-radius: 0.375rem;
  display: inline-block;
  
  &:hover {
    background-color: transparent;
    
    img {
      filter: brightness(0) invert(1);
    }
  }
}
</file>

<file path="src/components/ArtifactHeader.tsx">
"use client";

import {
  ArrowRightStartOnRectangleIcon,
  PencilSquareIcon,
} from "@heroicons/react/24/outline";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import ArtifactTimeline from "./ArtifactTimeline";
import Image from "next/image";
import clsx from "clsx";
import { v4 as uuidv4 } from "uuid";
import { useAgentStreamContext } from "@/context/AgentStreamProvider";

import styles from "./ArtifactHeader.module.scss";

interface ArtifactHeaderProps {
  tasks?: {
    original_index: number;
    task_title: string;
    task_type: string;
    task_icon: string;
  }[];
  currentTaskIndex: number;
}

const ArtifactHeader = ({
  tasks = [],
  currentTaskIndex,
}: ArtifactHeaderProps) => {
  const router = useRouter();
  const { signOut } = useAuth();
  const { reset } = useAgentStreamContext();

  const handleNewConversation = () => {
    const newThreadId = uuidv4();
    reset();

    router.push(`/conversation/${newThreadId}`);
  };

  const handleLogout = async () => {
    reset();
    await signOut();
    router.replace("/signin");
  };
  return (
    <div
      className={clsx(
        styles.artifactHeader,
        "flex flex-col gap-2 px-5 md:px-10 py-4 bg-[var(--artifact-bg)]"
      )}
    >
      <div className="flex flex-row justify-between items-center min-h-[55px]">
        <div className="flex flex-row gap-4 items-center justify-center">
          <Image
            src="/assets/images/logo.png"
            alt="Logo"
            width={37}
            height={37}
          />
          <span className="ava_title">Kireon GPT</span>
        </div>

        <div className="flex flex-row items-center gap-0 md:gap-6">
          <button
            onClick={handleNewConversation}
            title="Neuer Chat"
            className={styles.headerButton}
          >
            <PencilSquareIcon className="h-6 w-6 text-gray-500" />
          </button>
          <button
            onClick={handleLogout}
            title="Logout"
            className={styles.headerButton}
          >
            <ArrowRightStartOnRectangleIcon className="h-6 w-6 text-gray-500" />
          </button>
          <a
            href="https://deyan7.de/"
            target="_blank"
            rel="noopener noreferrer"
            title="Zur Deyan7-Webseite"
            className={styles.headerLink}
          >
            <Image
              src="/assets/images/deyan7_logo.svg"
              alt="Deyan7 Logo"
              width={93}
              height={40}
            />
          </a>
        </div>
      </div>

      {tasks.length > 0 && (
        <ArtifactTimeline
          tasks={tasks}
          currentTask={currentTaskIndex}
          totalTasks={tasks.length}
        />
      )}
    </div>
  );
};

export default ArtifactHeader;
</file>

<file path="src/components/ArtifactLoading.module.scss">
.linkOrange {
  color: var(--rosewood);
  font-weight: 700;

  &::after {
    content: attr(data-icon);
    font-family: "Font Awesome 6 Free";
    font-weight: 900;
    display: inline-block;
    text-align: center;
    line-height: 30px;
    margin-left: 10px;
    transition: margin-left 300ms ease 0ms;
  }

  &:hover::after {
    margin-left: 15px;
  }
}
</file>

<file path="src/components/ArtifactLoading.tsx">
"use client";

import { useEffect, useState } from "react";
import styles from "./ArtifactLoading.module.scss";

type Props = {
  loading: boolean;
  artifactTitle?: string;
  artifactId: string;
  artifactVersion: number;
  onArtifactSelected?: (artifact: { id: string; version: number }) => void;
};

const ArtifactLoading = ({
  loading,
  artifactTitle = "",
  artifactId,
  artifactVersion,
  onArtifactSelected,
}: Props) => {
  const [currentTitle, setCurrentTitle] = useState(artifactTitle);

  useEffect(() => {
    setCurrentTitle(artifactTitle);
  }, [artifactTitle]);

  const truncatedTitle =
    currentTitle.length > 50
      ? currentTitle.substring(0, 50) + "..."
      : currentTitle;

  const handleClick = () => {
    if (!loading && onArtifactSelected) {
      onArtifactSelected({ id: artifactId, version: artifactVersion });
    }
  };

  return (
    <div
      className={`artifact-loading-container flex ${
        !loading ? "cursor-pointer" : ""
      }`}
      onClick={handleClick}
    >
      <div className="artifact-loading-right flex flex-col justify-center">
        {loading ? (
          <p className="text-gray-400">Generiere Antwort</p>
        ) : currentTitle ? (
          <p className={`artifact-title ${styles.linkOrange}`} data-icon="→">
            {truncatedTitle}
          </p>
        ) : null}
      </div>
    </div>
  );
};

export default ArtifactLoading;
</file>

<file path="src/components/ArtifactMarkdown.tsx">
"use client";

import {
  formatMarkdownHtml,
  splitMarkdownIntoChunks,
} from "@/domain/markdown-service";
import ArtifactEditor from "./ArtifactEditor";

type Props = {
  artifact: any;
  onModified: (updatedArtifact: any) => void;
};

const ArtifactMarkdown = ({ artifact, onModified }: Props) => {
  const markdown =
    typeof artifact.payload === "string"
      ? artifact.payload
      : artifact.content?.artifact_content ??
        artifact.content?.task_content?.content ??
        "";

  const chunks = splitMarkdownIntoChunks(markdown);

  return (
    <div className="flex-grow space-y-4">
      {chunks.map((chunk, index) =>
        chunk.type === "markdown" ? (
          <div
            key={index}
            className="markdown-chat"
            dangerouslySetInnerHTML={{
              __html: formatMarkdownHtml(chunk.content),
            }}
          />
        ) : (
          <ArtifactEditor
            key={index}
            artifact={{
              ...artifact,
              payload: chunk.content,
              isCodeBlock: true,
              language: chunk.language,
            }}
            versions={[]}
            onModified={onModified}
          />
        )
      )}
    </div>
  );
};

export default ArtifactMarkdown;
</file>

<file path="src/components/ArtifactTaskInstruction.tsx">
"use client";

import { formatMarkdownHtml } from "@/domain/markdown-service";

type Props = {
  artifact: any;
};

const ArtifactTaskInstruction = ({ artifact }: Props) => {
  return (
    <div className="flex flex-col h-full">
      <div
        className="flex-grow markdown-chat"
        dangerouslySetInnerHTML={{
          __html: formatMarkdownHtml(artifact.content ?? ""),
        }}
      />
    </div>
  );
};

export default ArtifactTaskInstruction;
</file>

<file path="src/components/ArtifactTimeline.module.scss">
.artifactTimeline {
  position: relative;
  background-color: var(--artifact-bg);
  z-index: 10;
  
  &::before {
    height: 1px;
    width: 100%;
    content: "";
    position: absolute;
    top: calc(50% - 0.5px);
    background-color: #747f9e;
    z-index: 1;
  }
  
  .artifactTimelineBubbles {
    width: 100%;
  }
  
  .timelineItem {
    width: 38px;
    height: 38px;
    border-radius: 30px;
    border: 1px solid #747f9e;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #F5F5F5 !important;
    z-index: 10;
    padding: 0.4rem;
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1) !important;
    position: relative;
    
    img {
      filter: invert(49%) sepia(9%) saturate(262%) hue-rotate(183deg);
      transition: filter 0.3s ease;
    }
    
    &.timelineDone {
      border: 2px solid var(--red-crayola);
      background-color: #FAFAFA !important;
      transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }
    
    &.timelineActive {
      width: 55px !important;
      height: 55px !important;
      border: 2px solid var(--red-crayola);
      padding: 0.65rem !important;
      background-color: var(--melon) !important;
      transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1) !important;
      
      &::before {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: 50%;
        background: linear-gradient(45deg, rgba(232, 76, 90, 0.3), rgba(246, 189, 182, 0.2), rgba(232, 76, 90, 0.3)) !important;
        background-size: 200% 200%;
        z-index: 0;
        animation: backgroundShift 6s ease-in-out infinite;
        opacity: 0.3;
      }
      
      &::after {
        content: '';
        position: absolute;
        inset: -3px;
        border-radius: 50%;
        background: conic-gradient(from 0deg, transparent 0deg, var(--red-crayola) 90deg, transparent 180deg, var(--melon) 270deg, transparent 360deg);
        z-index: -1;
        animation: rotateRing 8s linear infinite;
        opacity: 0.3;
      }
      
      img {
        filter: invert(80%) sepia(9%) saturate(262%) hue-rotate(183deg);
        position: relative;
        z-index: 1;
        animation: iconPulse 4s ease-in-out infinite;
      }
    }
  }
}

@keyframes backgroundShift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

@keyframes rotateRing {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes iconPulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.9;
    transform: scale(0.98);
  }
}

#artifactTimelineProgressContainer {
  width: calc(100% - 5rem);
  height: 2px;
  position: absolute;
  z-index: 5;
}

#artifactTimelineProgress {
  height: 2px;
  background: linear-gradient(90deg, var(--red-crayola), var(--melon));
  top: calc(50% - 1px);
  transition: width 0.5s ease-in-out;
}
</file>

<file path="src/components/ArtifactTimeline.tsx">
"use client";

import type { Task } from "@/types/generic";
import Image from "next/image";
import styles from "./ArtifactTimeline.module.scss";

type Props = {
  tasks: Task[];
  currentTask: number;
  totalTasks: number;
};

const ArtifactTimeline = ({ tasks, currentTask, totalTasks }: Props) => {
  const progressWidth =
    totalTasks > 1 ? `${(currentTask / (totalTasks - 1)) * 100}%` : "0%";

  return (
    <div
      className={`${styles.artifactTimeline} flex justify-between items-center min-h-[55px] relative`}
    >
      <div
        id="artifactTimelineProgressContainer"
        className="absolute top-1/2 left-[2.5rem] right-[2.5rem] h-[2px] z-5 bg-[#747F9E]"
      >
        <div
          id="artifactTimelineProgress"
          className="bg-[#71D8FC] h-[2px] transition-all"
          style={{ width: progressWidth }}
        />
      </div>

      <div
        className={`${styles.artifactTimelineBubbles} flex justify-between items-center w-full z-10 relative`}
      >
        {tasks.map((task) => {
          const taskIndex = task.original_index;
          const done = taskIndex < currentTask;
          const active = taskIndex === currentTask;

          const bubbleClass = [
            styles.timelineItem,
            done && styles.timelineDone,
            active && styles.timelineActive,
          ]
            .filter(Boolean)
            .join(" ");

          return (
            <div
              key={taskIndex}
              className={bubbleClass}
              title={task.task_title}
            >
              <Image
                src={task.task_icon}
                alt={task.task_title}
                width={48}
                height={48}
                className="task-icon w-12 h-12"
              />
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ArtifactTimeline;
</file>

<file path="src/components/ArtifactView.module.scss">
.artifactContainer {
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  position: relative;
}

.artifactContent {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;

  // Firefox scrollbar
  scrollbar-width: thin;
  scrollbar-color: var(--scrollbar-color) transparent;

  // WebKit scrollbar
  &::-webkit-scrollbar {
    width: 12px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-color);
    border: 3px solid transparent;
    border-radius: 10px;
    background-clip: padding-box;
  }
}

.artifactInnerContent {
  display: flex;
  flex-direction: column;
  margin-bottom: 50px;
  margin-top: 60px;
}

.fadeIn {
  position: absolute;
  top: 50px;
  left: 0;
  width: calc(100% - 30px);
  height: 60px;
  pointer-events: none;
  background: linear-gradient(
    to bottom,
    #F5F5F5,
    rgba(245, 245, 245, 0)
  );
  z-index: 1;
}

.fadeOut {
  position: absolute;
  bottom: 80px;
  left: 0;
  width: calc(100% - 30px);
  height: 60px;
  pointer-events: none;
  background: linear-gradient(
    to top,
    #F5F5F5,
    rgba(245, 245, 245, 0)
  );
  z-index: 1;
}

.artifactActionFooter {
  position: relative;
  z-index: 2;
  margin-bottom: 10px;
}

.artifact {
  background-color: var(--artifact-bg);
  scrollbar-width: thin;
  scrollbar-color: var(--scrollbar-color) transparent;

  &::-webkit-scrollbar {
    width: 12px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-color);
    border: 3px solid transparent;
    border-radius: 10px;
    background-clip: padding-box;
  }
}

.notification {
  position: absolute;
  bottom: 4rem;
  right: 1rem;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  transition: opacity 0.3s ease;
}

.formLoadingPlaceholder {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin: 16px 0;
  opacity: 0.4; /* fade everything together */
  filter: grayscale(100%); /* turn all colors to gray */
}

.shimmerBlock {
  height: 2.5rem; /* match your input height */
  width: 100%;
  background: linear-gradient(to right, #e0e0e0 0%, #f8f8f8 50%, #e0e0e0 100%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: 6px;
}

.shimmerBlock.short {
  width: 60%;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}
</file>

<file path="src/components/ArtifactView.tsx">
"use client";

import { useEffect, useRef, useState, useMemo } from "react";
import ArtifactEval from "./ArtifactEval";
import ArtifactForm from "./ArtifactForm";
import ArtifactHeader from "@/components/ArtifactHeader";
import ArtifactActionButton from "@/components/ArtifactActionButton";
import { ArtifactType } from "@/domain/constants";
import clsx from "clsx";
import { useAuth } from "@/context/AuthContext";
import { useTaskContext } from "@/context/TaskContext";
import { useAgentStreamContext } from "@/context/AgentStreamProvider";
import { useNormalizedParam } from "@/lib/hooks/useNormalizedParam";
import { useMediaQuery } from "react-responsive";

import styles from "./ArtifactView.module.scss";
import ArtifactMarkdown from "./ArtifactMarkdown";

const ArtifactView = () => {
  const { user, loading } = useAuth();

  const isMobile = useMediaQuery({ query: "(max-width: 767px)" });
  const [isActionLoading, setIsActionLoading] = useState(false);
  const [updatedArtifact, setUpdatedArtifact] = useState<any>(null);

  const {
    artifacts: streamedArtifacts,
    chatMessages,
    sendMessage,
    clearArtifacts,
  } = useAgentStreamContext();

  const lastMessage = chatMessages.at(-1);
  const nextCommand = (lastMessage?.meta?.available_commands as any[])?.[0];
  const conversationUuid = useNormalizedParam("conversationId") as string;

  const scrollAnchorRef = useRef<HTMLDivElement | null>(null);
  const artifactScrollRef = useRef<HTMLDivElement | null>(null);

  const { tasks: taskSummary, currentTaskIndex } = useTaskContext();

  const latestArtifact = streamedArtifacts.at(-1);

  const parsedContent = useMemo(() => {
    try {
      if (typeof latestArtifact?.content === "string") {
        const trimmed = latestArtifact.content.trim();
        const isLikelyJson =
          (trimmed.startsWith("{") && trimmed.endsWith("}")) ||
          (trimmed.startsWith("[") && trimmed.endsWith("]"));
        if (isLikelyJson) {
          try {
            return JSON.parse(trimmed);
          } catch {
            return trimmed;
          }
        }
      }
      return latestArtifact?.content ?? {};
    } catch {
      return {};
    }
  }, [latestArtifact]);

  const artifactType: ArtifactType | undefined =
    latestArtifact?.type ||
    parsedContent.artifact_type ||
    parsedContent.task_type;

  const ArtifactComponent = selectArtifactComponent(artifactType);

  const normalizedArtifact: any = useMemo(
    () => ({
      ...(latestArtifact || {}),
      type: artifactType,
      title:
        latestArtifact?.title ||
        parsedContent.artifact_title ||
        parsedContent.task_title,
      payload:
        parsedContent.payload ||
        parsedContent.artifact_content ||
        parsedContent.task_content?.content ||
        (typeof parsedContent === "string" ? parsedContent : ""),
      status: latestArtifact?.status,
    }),
    [latestArtifact, artifactType, parsedContent]
  );

  const renderedArtifact = useMemo(() => {
    if (!latestArtifact) return null;

    if (
      normalizedArtifact.type === "json_form" &&
      normalizedArtifact.status === "streaming"
    ) {
      return (
        <div className={styles.formLoadingPlaceholder}>
          <div className={styles.shimmerBlock} />
          <div className={`${styles.shimmerBlock} ${styles.short}`} />
          <div className={styles.shimmerBlock} />
          <div className={`${styles.shimmerBlock} ${styles.short}`} />
        </div>
      );
    }

    return (
      <ArtifactComponent
        artifact={normalizedArtifact}
        onModified={setUpdatedArtifact}
      />
    );
  }, [latestArtifact, normalizedArtifact, ArtifactComponent]);

  useEffect(() => {
    const anchor = scrollAnchorRef.current;
    const container = artifactScrollRef.current;
    if (anchor && container) {
      anchor.scrollIntoView({ behavior: "smooth", block: "end" });
    }
  }, [renderedArtifact]);

  const onAction = async () => {
    if (loading || !user) return;
    const updated = updatedArtifact || normalizedArtifact;
    if (!updated) return;

    const token = await user.getIdToken();
    setIsActionLoading(true);
    if (nextCommand?.name === "CMD_SUBMIT_TASK_WITH_ARTIFACT") {
      clearArtifacts();
    }
    await sendMessage(
      {
        thread_id: conversationUuid,
        user_id: user.uid,
        model: "gpt-4o-mini",
        stream_tokens: true,
        message: "",
        agent_id: "kireon-agent",
        agent_config: {
          command_id: nextCommand?.id,
          artifact_content: updated,
        },
      },
      token
    );
    setIsActionLoading(false);
  };

  return (
    <div
      className={clsx(
        styles.artifact,
        "h-full flex flex-col overflow-hidden relative"
      )}
    >
      <div className={clsx(isMobile ? "mobile-header" : "")}>
        <ArtifactHeader
          tasks={taskSummary}
          currentTaskIndex={currentTaskIndex}
        />
      </div>

      <div className={styles.artifactContainer}>
        <div className={styles.fadeIn} />
        <div
          className={clsx(
            styles.artifactContent,
            "pt-[30px] overflow-y-auto h-full"
          )}
          ref={artifactScrollRef}
        >
          <div className={clsx(styles.artifactInnerContent, "pl-10 pr-10")}>
            {renderedArtifact}
            <div ref={scrollAnchorRef} />
          </div>
        </div>
        <div className={styles.fadeOut} />
        <div className={clsx(styles.artifactActionFooter, "pl-10 pr-10")}>
          <ArtifactActionButton
            label={nextCommand?.label}
            onAction={onAction}
            disabled={loading || isActionLoading}
          />
        </div>
      </div>
    </div>
  );
};

function selectArtifactComponent(artifactType?: ArtifactType) {
  switch (artifactType) {
    case ArtifactType.JsonForm:
      return ArtifactForm;
    case ArtifactType.Markdown:
    case ArtifactType.MarkdownEditor:
    case ArtifactType.TaskInstruction:
    case ArtifactType.ChatTask:
      return ArtifactMarkdown;
    case ArtifactType.TaskEvaluation:
    case ArtifactType.EvaluateAll:
      return ArtifactEval;
    default:
      return ArtifactMarkdown;
  }
}

export default ArtifactView;
</file>

<file path="src/components/BaseLayout.tsx">
"use client";

import Image from "next/image";
import type { ReactNode } from "react";
import LegalLinks from "@/components/LegalLinks";

interface BaseLayoutProps {
  children: ReactNode;
}

const BaseLayout = ({ children }: BaseLayoutProps) => {
  return (
    <>
      <div className="flex flex-col relative z-10 gap-20 justify-center h-screen w-screen overflow-hidden">
        <div className="flex flex-col gap-4 items-center justify-center">
          <div>
            <Image
              src="/assets/images/logo.png"
              alt="Logo"
              width={90}
              height={90}
              className="w-[90px]"
              priority
            />
          </div>
          <span className="ava_title">Kireon GPT</span>
        </div>

        <main className="flex justify-center">
          <div className="box_blue_wrapper">
            <div className="box_blue p-8">{children}</div>
          </div>
        </main>

        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 z-20">
          <LegalLinks />
        </div>
      </div>

      <style jsx>{`
        .icon_agent {
          display: none !important;
        }
      `}</style>
    </>
  );
};

export default BaseLayout;
</file>

<file path="src/components/ChatMessage.module.scss">
.chatMessage {
  &.user {
    background-color: var(--melon);
    color: var(--rosewood-dark);
    padding: 0 1rem 0.25rem;
    margin: 1rem 1rem 2rem;
    max-width: 70%;
    border-radius: 1rem;
  }
}
</file>

<file path="src/components/ChatMessage.tsx">
"use client";

import React from "react";
import config from "@/config";
import { Role } from "@/domain/constants";
import Image from "next/image";

type Props = {
  role: Role;
  message?: any;
  isLoadingArtifact: boolean;
  isStartScreen: boolean;
  onArtifactSelected?: (artifact: { id: string; version: number }) => void;
  children?: React.ReactNode;
};

const ChatMessage: React.FC<Props> = ({
  role = Role.AI,
  isStartScreen,
  children,
}) => {
  const showAvatar = (role === Role.TOOL || role === Role.AI) && !isStartScreen;

  const roleConfigMap = {
    [Role.TOOL]: config.system,
    [Role.AI]: config.agent,
    [Role.CUSTOM]: config.agent,
    [Role.HUMAN]: config.user,
  };

  const roleConfig = roleConfigMap[role];
  const Icon = roleConfig.icon;
  const iconColor = roleConfig.iconColor;

  return (
    <div className={`chat-message ${role === Role.HUMAN ? "user" : "ai"}`}>
      {showAvatar && Icon && (
        <div className="icon_agent h-10 w-10 shrink-0 mr-4 mt-[0.2rem] flex items-center justify-center bg-[var(--darkblue)] rounded-full">
          {typeof Icon === "string" ? (
            <Image
              width="26"
              height="10"
              alt={`${role} icon`}
              src={`/assets/images/${Icon}`}
              className={iconColor}
            />
          ) : (
            <Icon className={iconColor} />
          )}
        </div>
      )}

      <div className="flex-grow mt-2.5">
        <div className="leading-relaxed whitespace-pre-wrap">
          {children ?? <span className="text-gray-400">Loading...</span>}
        </div>
      </div>
    </div>
  );
};

export default ChatMessage;
</file>

<file path="src/components/ConversationChat.module.scss">
.chatContainer {
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  position: relative;
  min-width: 325px;

  @media (max-width: 768px) {
    height: auto;
  }
}

.messagesWrapper {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;

  // Firefox scrollbar
  scrollbar-width: thin;
  scrollbar-color: var(--scrollbar-color) transparent;

  // WebKit scrollbar (using :global correctly in SCSS)
  :global(.messagesWrapper::-webkit-scrollbar) {
    width: 8px;
  }

  :global(.messagesWrapper::-webkit-scrollbar-track) {
    background: transparent;
  }

  :global(.messagesWrapper::-webkit-scrollbar-thumb) {
    background-color: var(--scrollbar-color);
    border: 3px solid transparent;
    border-radius: 10px;
    background-clip: padding-box;
  }
}

.messagesContent {
  position: relative;
  min-height: min-content;
  width: 100%;
  max-width: var(--container-width);
  margin: 0 auto;
  padding: 1.5rem 2rem;
}

.inputWrapper {
  position: relative;
  width: 100%;
  flex-shrink: 0;
}

.scrollButtonContainer {
  position: absolute;
  bottom: 110%;
  left: 50%;
  transform: translateX(-50%);
  z-index: 10;

  svg {
    color: #fe5000 !important;
  }
}
</file>

<file path="src/components/ConversationChat.tsx">
import { useState, useRef, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import ChatMessage from "@/components/ChatMessage";
import ScrollDownButton from "@/components/ScrollDownButton";
import SendMessageInput, {
  SendMessageInputRef,
} from "@/components/SendMessageInput";
import { formatMarkdownHtml } from "@/domain/markdown-service";

import styles from "./ConversationChat.module.scss";

import { useNormalizedParam } from "@/lib/hooks/useNormalizedParam";
import { Role } from "@/domain/constants";
import { getConversation } from "@/domain/conversation";
import { useAuth } from "@/context/AuthContext";
import { User } from "firebase/auth";
import { useAgentStreamContext } from "@/context/AgentStreamProvider";
import { NetworkingError } from "@/types/generic";
import { useMediaQuery } from "react-responsive";

const ConversationChat = () => {
  const isMobile = useMediaQuery({ query: "(max-width: 767px)" });

  const hasInitialized = useRef(false);

  const conversationUuid = useNormalizedParam("conversationId") as string;

  const lastMessageId = useRef<string | null>(null);

  const [isScrolledToBottom, setIsScrolledToBottom] = useState(true);
  const chatContentRef = useRef<HTMLDivElement>(null);

  const [isLoading, setIsLoading] = useState(false);
  const userRef = useRef<User | null>(null);

  const sendMessageInput = useRef<SendMessageInputRef | null>(null);

  const { sendMessage, isStreaming, chatMessages, error, loadHistory } =
    useAgentStreamContext();

  const { user } = useAuth();

  const searchParams = useSearchParams();

  useEffect(() => {
    userRef.current = user;
  }, [user]);

  function startUpdateScrollBottomRef() {
    const chatContentValue = chatContentRef.current;
    if (chatContentValue) {
      chatContentValue.onscroll = () => {
        setIsScrolledToBottom(
          chatContentValue.scrollTop + chatContentValue.clientHeight >=
            chatContentValue.scrollHeight - 600
        );
      };
    }
  }

  useEffect(() => {
    const newestMessage = chatMessages.at(-1);
    const id = newestMessage?.id;

    if (!id || id === lastMessageId.current || !isScrolledToBottom) return;

    lastMessageId.current = id;
    scrollToBottom("smooth");
  }, [chatMessages, isScrolledToBottom]);

  useEffect(() => {
    if (hasInitialized.current) return;
    hasInitialized.current = true;

    const initialize = async () => {
      setIsLoading(true);

      try {
        const conversation = await getConversation(conversationUuid);
        if (!conversation) throw new Error("Conversation not found");
        if (conversation instanceof NetworkingError) {
          throw new Error("Not history found");
        }
        loadHistory(conversation.messages);
      } catch {
        try {
          if (!user) throw new Error("User not ready");

          const token = await user.getIdToken();

          await sendMessage(
            {
              thread_id: conversationUuid,
              user_id: user.uid,
              model: "gpt-4o-mini",
              stream_tokens: true,
              message: "",
              agent_id: "kireon-agent",
              agent_config: {
                require_email:
                  searchParams.get("requireEmail")?.toLowerCase() === "true",
                email: user?.email ?? "",
              },
            },
            token
          );
        } catch (streamError) {
          console.warn("Stream error:", streamError);
        }
      } finally {
        setIsLoading(false);
        setTimeout(() => scrollToBottom("instant"), 0);
        startUpdateScrollBottomRef();
      }
    };

    initialize();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const scrollToBottom = (behavior: ScrollBehavior = "smooth") => {
    chatContentRef.current?.scrollTo({
      left: 0,
      top: chatContentRef.current.scrollHeight,
      behavior: behavior,
    });
  };

  return (
    <div className={styles.chatContainer}>
      <div className={styles.messagesWrapper} ref={chatContentRef}>
        <div className={styles.messagesContent}>
          {chatMessages.map((message) => (
            <div key={`${message.id}`} className="w-full flex justify-end">
              <ChatMessage
                role={message.role as Role}
                message={message}
                isStartScreen={false}
                isLoadingArtifact={false}
              >
                <div
                  className="markdown-chat text-black text-lg"
                  dangerouslySetInnerHTML={{
                    __html: formatMarkdownHtml(message.content ?? ""),
                  }}
                />
              </ChatMessage>
            </div>
          ))}

          {error && (
            <div className="text-center">
              <input
                className="container"
                type="text"
                placeholder={error}
                aria-invalid
                readOnly
              />
            </div>
          )}
          {isStreaming && (
            <ChatMessage
              role={Role.AI}
              aria-busy={isLoading}
              isStartScreen={false}
              isLoadingArtifact={false}
            />
          )}
        </div>
      </div>

      <div className={styles.inputWrapper}>
        {!isScrolledToBottom && (
          <div className={styles.scrollButtonContainer}>
            <ScrollDownButton onClick={scrollToBottom} />
          </div>
        )}
        {!isMobile && <SendMessageInput ref={sendMessageInput} />}
      </div>
    </div>
  );
};

export default ConversationChat;
</file>

<file path="src/components/LegalLinks.tsx">
"use client";

import { useTranslations } from "next-intl";

interface LegalLinksProps {
  className?: string;
}

const LegalLinks = ({ className = "" }: LegalLinksProps) => {
  const t = useTranslations();
  return (
    <div className={`flex gap-2 sm:gap-4 text-xs ${className}`}>
      <a
        href="https://deyan7.de/impressum/"
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-400 hover:text-blue-300 underline hover:no-underline transition-colors whitespace-nowrap"
      >
        {t("impressum")}
      </a>
      <a
        href="https://deyan7.de/datenschutz/"
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-400 hover:text-blue-300 underline hover:no-underline transition-colors whitespace-nowrap"
      >
        {t("privacy_policy")}
      </a>
    </div>
  );
};

export default LegalLinks;
</file>

<file path="src/components/Protected.tsx">
"use client";

import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";
import { ReactNode, useEffect } from "react";

const Protected = ({ children }: { children: ReactNode }) => {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.replace("/signin");
    }
  }, [loading, user, router]);

  if (loading || !user) {
    return null;
  }

  return <>{children}</>;
};

export default Protected;
</file>

<file path="src/components/ScrollDownButton.module.scss">
.textOrange {
  color: var(--rosewood);
}
</file>

<file path="src/components/ScrollDownButton.tsx">
"use client";

import styles from "./ScrollDownButton.module.scss";

interface ScrollDownButtonProps {
  onClick: () => void;
}

const ScrollDownButton = ({ onClick }: ScrollDownButtonProps) => {
  return (
    <div
      onClick={(e) => {
        e.preventDefault();
        onClick();
      }}
      className="border-black/10 border-2 bg-white hover:bg-gray-100 mx-auto z-10 rounded-full cursor-pointer"
    >
      <svg
        width="32"
        height="32"
        viewBox="0 0 24 24"
        fill="none"
        className={`m-1 ${styles.textOrange}`}
      >
        <path
          d="M17 13L12 18L7 13M12 6L12 17"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
    </div>
  );
};

export default ScrollDownButton;
</file>

<file path="src/components/SendMessageInput.tsx">
"use client";

import { forwardRef, useImperativeHandle, useRef } from "react";
import { useTranslations } from "next-intl";
import { useMediaQuery } from "react-responsive";
import TextInput, { TextInputRef } from "./TextInput";
import { useAgentStreamContext } from "@/context/AgentStreamProvider";
import { useNormalizedParam } from "@/lib/hooks/useNormalizedParam";
import { useAuth } from "@/context/AuthContext";
import LegalLinks from "./LegalLinks";
import { useSplitViewContext } from "./SplitView";

type Props = {
  placeholder?: string;
};

export type SendMessageInputRef = {
  focusInput: () => void;
};

const SendMessageInput = forwardRef<SendMessageInputRef, Props>(
  ({ placeholder }, ref) => {
    const conversationUuid = useNormalizedParam("conversationId") as string;
    const { sendMessage, isStreaming } = useAgentStreamContext();
    const { user, loading } = useAuth();
    const textInputRef = useRef<TextInputRef>(null);
    const { isCompact } = useSplitViewContext();

    const isMobile = useMediaQuery({ query: "(max-width: 767px)" });

    const t = useTranslations();

    useImperativeHandle(ref, () => ({
      focusInput: () => {
        textInputRef.current?.focusInput();
      },
    }));

    const handleSubmit = async (message: string) => {
      if (!user || loading) {
        console.warn("User not authenticated yet.");
        return;
      }

      const token = await user.getIdToken();

      await sendMessage(
        {
          thread_id: conversationUuid,
          user_id: user.uid,
          model: "gpt-4o-mini",
          stream_tokens: true,
          message: message,
          agent_id: "kireon-agent",
        },
        token
      );
    };

    return (
      <div className="container text-center mb-2 mt-1 px-0 md:px-8">
        <div className="relative mb-2">
          <TextInput
            ref={textInputRef}
            inputEnabled={!isStreaming}
            placeholder={placeholder}
            onSubmit={handleSubmit}
          />
        </div>
        <div className="flex flex-wrap justify-center sm:justify-between items-center gap-x-4 gap-y-1 text-[0.6rem] text-gray-400">
          <span
            className={`${
              isMobile
                ? "hidden min-[480px]:inline"
                : isCompact
                ? "hidden"
                : "inline"
            } sm:text-left`}
          >
            {t("llm_disclaimer")}
          </span>
          <span
            className={`${
              isMobile
                ? "inline min-[480px]:hidden text-center"
                : isCompact
                ? "inline text-center"
                : "hidden"
            }`}
          >
            {t("llm_disclaimer_short")}
          </span>
          <LegalLinks className="shrink-0" />
        </div>
      </div>
    );
  }
);

SendMessageInput.displayName = "SendMessageInput";
export default SendMessageInput;
</file>

<file path="src/components/SignIn.module.scss">
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes logoFloat {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@keyframes inputFocusGlow {
  0% { box-shadow: 0 0 0 0 rgba(232, 76, 90, 0.4); }
  70% { box-shadow: 0 0 0 10px rgba(232, 76, 90, 0); }
  100% { box-shadow: 0 0 0 0 rgba(232, 76, 90, 0); }
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
  20%, 40%, 60%, 80% { transform: translateX(5px); }
}

.logoSection {
  animation: fadeInUp 0.8s ease-out;
}

.logo {
  animation: logoFloat 4s ease-in-out infinite;
  filter: drop-shadow(0 10px 30px rgba(232, 76, 90, 0.3));
  transition: transform 0.3s ease, filter 0.3s ease;

  &:hover {
    transform: scale(1.05);
    filter: drop-shadow(0 15px 40px rgba(232, 76, 90, 0.5));
  }

  @media (max-width: 767px) {
    width: 70px !important;
    height: 70px !important;
  }
}

.contentContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5rem;
  max-width: 565px;
  width: 50%;
  
  @media (max-width: 767px) {
    width: 90%;
    gap: 3rem;
  }
}

.formSection {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.formWrapper {
  animation: fadeInUp 0.8s ease-out 0.2s both;
  width: 100%;
}

.inputWrapper {
  position: relative;
}

.input {
  border: 2px solid rgba(232, 76, 90, 0.2) !important;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
  height: auto !important;
  margin: 0 !important;

  &::placeholder {
    color: var(--grey) !important;
    transition: color 0.3s ease !important;
  }

  &:hover:not(:disabled) {
    border-color: rgba(232, 76, 90, 0.4) !important;
    
    &::placeholder {
      color: rgba(255, 255, 255, 0.6) !important;
    }
  }

  &:focus {
    outline: none !important;
    border-color: var(--red-crayola) !important;
    box-shadow: 0 0 0 4px rgba(232, 76, 90, 0.1) !important;
    animation: inputFocusGlow 0.75s ease !important;

    &::placeholder {
      color: rgba(255, 255, 255, 0.7) !important;
    }
  }

  &:disabled {
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    border-color: rgba(232, 76, 90, 0.1) !important;
  }
}

.inputError {
  border-color: #ff5757 !important;
  box-shadow: 0 0 0 4px rgba(255, 87, 87, 0.1) !important;
  background: linear-gradient(135deg, rgba(255, 87, 87, 0.15), rgba(255, 87, 87, 0.08)) !important;
  
  &:focus {
    border-color: #ff5757 !important;
    box-shadow: 0 0 0 4px rgba(255, 87, 87, 0.2) !important;
    background: linear-gradient(135deg, rgba(255, 87, 87, 0.2), rgba(255, 87, 87, 0.1)) !important;
  }
  
  &:hover:not(:disabled) {
    border-color: #ff5757 !important;
    background: linear-gradient(135deg, rgba(255, 87, 87, 0.18), rgba(255, 87, 87, 0.1)) !important;
  }
}

.shake {
  animation: shake 0.6s ease-in-out;
}

.passwordToggle {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--grey);
  cursor: pointer;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  opacity: 0.7;
  border-radius: 6px;

  &:hover {
    color: var(--red-crayola);
    opacity: 1;
    background: rgba(232, 76, 90, 0.1);
  }

  &:focus {
    outline: none;
    color: var(--red-crayola);
    opacity: 1;
  }

  @media (max-width: 767px) {
    right: 0.75rem;
    padding: 0.375rem;
  }
}

.errorContainer {
  width: 100%;
  height: 60px;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  margin-top: 1rem;
  z-index: 10;
}

.errorMessage {
  color: #ff5757;
  font-size: 0.875rem;
  margin: 0;
  padding: 0.75rem 1rem;
  background: rgba(255, 87, 87, 0.1);
  border-radius: 6px;
  border-left: 3px solid #ff5757;
  text-align: center;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 87, 87, 0.2);
  animation: fadeInUp 0.3s ease-out;
  width: 100%;
  max-width: 565px;
}
</file>

<file path="src/components/SignIn.tsx">
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { useTranslations } from "next-intl";
import { useAuth } from "@/context/AuthContext";
import { EyeIcon, EyeSlashIcon } from "@heroicons/react/24/outline";
import styles from "./SignIn.module.scss";

const SignInPage = () => {
  const router = useRouter();

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const [authError, setAuthError] = useState<string | null>(null);
  const [signInRunning, setSignInRunning] = useState(false);
  const [hasError, setHasError] = useState(false);

  const t = useTranslations();

  const { signInWithEmail } = useAuth();

  const handleSignIn = async () => {
    setAuthError(null);
    setHasError(false);
    setSignInRunning(true);
    try {
      await signInWithEmail(email, password);
      router.replace("/start");
    } catch (error) {
      setHasError(true);
      setAuthError(error instanceof Error ? error.message : "Sign in failed");

      setTimeout(() => {
        setHasError(false);
      }, 600);
    } finally {
      setSignInRunning(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!signInRunning && email && password) {
      handleSignIn();
    }
  };

  return (
    <>
      <main className="w-screen h-screen flex flex-col justify-center items-center z-10 bg-white">
        <div className={styles.contentContainer}>
          <div
            className={`flex flex-col gap-4 items-center justify-center z-10 ${styles.logoSection}`}
          >
            <Image
              src="/assets/images/logo.png"
              alt="Logo"
              width={90}
              height={90}
              className={`w-[90px] ${styles.logo}`}
              priority
            />
            <span className="ava_title">Kireon GPT</span>
          </div>
          <div className={styles.formSection}>
            <article
              className={`box_blue_wrapper max-w-[565px] w-full z-10 ${styles.formWrapper}`}
            >
              <form
                onSubmit={handleSubmit}
                className="box_blue p-8 flex flex-col gap-6"
              >
                <input
                  type="email"
                  placeholder={t("email_placeholder") || "Email"}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={{
                    background: "var(--gradientDarkblue)",
                  }}
                  className={`w-full rounded-[9px] p-3 text-black placeholder-gray-500 focus:outline-none ${
                    styles.input
                  } ${hasError ? styles.inputError : ""} ${
                    hasError ? styles.shake : ""
                  }`}
                  disabled={signInRunning}
                />
                <div className={styles.inputWrapper}>
                  <input
                    type={showPassword ? "text" : "password"}
                    placeholder={t("password_placeholder") || "Password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    style={{
                      background: "var(--gradientDarkblue)",
                    }}
                    className={`w-full rounded-[9px] p-3 text-black placeholder-gray-500 focus:outline-none ${
                      styles.input
                    } ${hasError ? styles.inputError : ""} ${
                      hasError ? styles.shake : ""
                    }`}
                    disabled={signInRunning}
                  />
                  <button
                    type="button"
                    className={styles.passwordToggle}
                    onClick={() => setShowPassword(!showPassword)}
                    tabIndex={-1}
                    aria-label={
                      showPassword ? t("hide_password") : t("show_password")
                    }
                  >
                    {showPassword ? (
                      <EyeSlashIcon className="w-5 h-5" />
                    ) : (
                      <EyeIcon className="w-5 h-5" />
                    )}
                  </button>
                </div>
                <button
                  type="submit"
                  className="action-btn mb-0 w-full"
                  disabled={signInRunning || !email || !password}
                >
                  {signInRunning
                    ? "Signing in..."
                    : t("sign_in_button") || "Sign In"}
                </button>
              </form>
            </article>
            <div className={styles.errorContainer}>
              {authError && (
                <p className={styles.errorMessage}>
                  {t("sign_in_error") || authError}
                </p>
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default SignInPage;
</file>

<file path="src/components/SplitView.module.scss">
@media (max-width: 767px) {
  .mobileLayout {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    background: #FFFFFF;
    transform: translateZ(0);
  }

  .mobileArtifact {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 100px;
    z-index: 1;
  }

  .mobileChatPanel {
    position: absolute;
    top: 70px;
    left: 0;
    right: 0;
    bottom: 100px;
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(1px);
    z-index: 15;
    transition: transform 0.3s ease-in-out;
  }

  .mobileChatCollapsed {
    transform: translateY(100vh);
  }

  .mobileChatExpanded {
    transform: translateY(0);
  }

  .mobileMessagesOnly {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .mobileMessagesOnly :global([class*="inputWrapper"]) {
    display: none !important;
  }

  .mobileInputFixed {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 100px;
    background: #FFFFFF;
    border-top: 1px solid var(--melon);
    z-index: 25;
    display: flex;
    align-items: center;
    padding: 0 1rem;
  }

  .mobileInputContent :global([class*="messagesWrapper"]) {
    display: none !important;
  }

  .mobileInputContent :global([class*="inputWrapper"]) {
    width: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
  }

  .mobileInputContent {
    flex: 1;
    margin-left: 3rem;
  }

  .mobileToggle {
    position: absolute;
    top: 8px;
    left: 1rem;
    width: 32px;
    height: 32px;
    background: var(--melon);
    border: 1px solid var(--red-crayola);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 35;
  }

  .mobileChevron {
    width: 20px;
    height: 20px;
    color: var(--rosewood);
    transition: transform 0.3s ease;
  }

  .mobileChevronUp {
    transform: rotate(0deg);
  }

  .mobileChevronDown {
    transform: rotate(180deg);
  }

  .mobileCloseButton {
    position: absolute;
    top: 8px;
    right: 1rem;
    width: 32px;
    height: 32px;
    background: var(--melon);
    border: 1px solid var(--red-crayola);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 35;
  }

  .mobileCloseIcon {
    width: 16px;
    height: 16px;
    color: var(--rosewood);
  }
}
</file>

<file path="src/components/SplitView.tsx">
"use client";
import {
  useEffect,
  useRef,
  useState,
  useCallback,
  createContext,
  useContext,
} from "react";
import { useMediaQuery } from "react-responsive";
import ArtifactView from "@/components/ArtifactView";
import { useAgentStreamContext } from "@/context/AgentStreamProvider";
import SendMessageInput from "./SendMessageInput";
import styles from "./SplitView.module.scss";

declare global {
  interface Window {
    mobileLayoutControls?: {
      expandLeftPane: () => void;
      collapseLeftPane: () => void;
      isMobile: boolean;
    };
  }
}

const MIN_WIDTH = 450;
const COMPACT_BREAKPOINT = 570;

type SplitViewContextType = {
  containerWidth: number;
  isCompact: boolean;
};

const SplitViewContext = createContext<SplitViewContextType>({
  containerWidth: 600,
  isCompact: false,
});

export const useSplitViewContext = () => useContext(SplitViewContext);

const SplitViewLayout = ({ children }: { children: React.ReactNode }) => {
  const [leftWidth, setLeftWidth] = useState<number>(600);
  const isCompact = leftWidth < COMPACT_BREAKPOINT;
  const [maxLeftWidth, setMaxLeftWidth] = useState<number>(1000);
  const [isLeftPaneExpanded, setIsLeftPaneExpanded] = useState<boolean>(false);

  const { chatMessages, artifacts } = useAgentStreamContext();

  const lastChatId = useRef<string | null>(null);
  const lastArtifactId = useRef<string | null>(null);

  const startX = useRef(0);
  const startWidth = useRef(0);
  const inputRef = useRef<HTMLDivElement>(null);

  const isMobile = useMediaQuery({ query: "(max-width: 767px)" });

  useEffect(() => {
    if (!isMobile) {
      const initial = window.innerWidth * 0.3;
      setLeftWidth(Math.max(MIN_WIDTH, initial));
      setMaxLeftWidth(window.innerWidth * 0.7);
    }
  }, [isMobile]);

  const expandLeftPane = useCallback(() => {
    if (isMobile && !isLeftPaneExpanded) {
      setIsLeftPaneExpanded(true);
    }
  }, [isMobile, isLeftPaneExpanded]);

  const collapseLeftPane = useCallback(() => {
    if (isMobile && isLeftPaneExpanded) {
      setIsLeftPaneExpanded(false);
    }
  }, [isMobile, isLeftPaneExpanded]);

  useEffect(() => {
    const handleResize = () => {
      if (!isMobile) {
        setMaxLeftWidth(window.innerWidth * 0.7);
        setLeftWidth((current) => Math.min(current, window.innerWidth * 0.7));
      }
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [isMobile]);

  useEffect(() => {
    if (isMobile) {
      const chatContent = document.querySelector(".mobile-chat-content");
      const textarea = chatContent?.querySelector("textarea");
      const sendButton = chatContent?.querySelector("a");

      const handleFocus = () => {
        setIsLeftPaneExpanded(true);
      };

      const handleSendClick = (e: Event) => {
        e.preventDefault();
        setIsLeftPaneExpanded(false);
      };

      const handleKeyPress = (e: KeyboardEvent) => {
        if (e.key === "Enter" && !e.shiftKey) {
          setIsLeftPaneExpanded(false);
        }
      };

      if (textarea) {
        textarea.addEventListener("focus", handleFocus);
        textarea.addEventListener("keypress", handleKeyPress);
      }

      if (sendButton) {
        sendButton.addEventListener("click", handleSendClick);
      }

      return () => {
        if (textarea) {
          textarea.removeEventListener("focus", handleFocus);
          textarea.removeEventListener("keypress", handleKeyPress);
        }
        if (sendButton) {
          sendButton.removeEventListener("click", handleSendClick);
        }
      };
    }
  }, [isMobile, isLeftPaneExpanded]);

  const startResize = (e: React.MouseEvent) => {
    e.preventDefault();
    startX.current = e.clientX;
    startWidth.current = leftWidth;
    window.addEventListener("mousemove", resize);
    window.addEventListener("mouseup", stopResize);
  };

  const resize = (e: MouseEvent) => {
    const deltaX = e.clientX - startX.current;
    const proposedWidth = startWidth.current + deltaX;

    const minWidth = MIN_WIDTH;

    const newWidth = Math.max(minWidth, Math.min(proposedWidth, maxLeftWidth));
    setLeftWidth(newWidth);
  };

  const stopResize = () => {
    window.removeEventListener("mousemove", resize);
    window.removeEventListener("mouseup", stopResize);
  };

  const toggleLeftPane = () => {
    setIsLeftPaneExpanded(!isLeftPaneExpanded);
  };

  useEffect(() => {
    if (!isMobile) return;

    const latestChat = chatMessages.at(-1);
    const latestArtifact = artifacts.at(-1);

    const newChatMessage =
      latestChat?.id && latestChat.id !== lastChatId.current;
    const newArtifact =
      latestArtifact?.id && latestArtifact.id !== lastArtifactId.current;

    if (newChatMessage) {
      lastChatId.current = latestChat.id;
      expandLeftPane(); // show chat
    }

    if (newArtifact) {
      lastArtifactId.current = latestArtifact.id;
      collapseLeftPane(); // show artifact
    }
  }, [chatMessages, artifacts, isMobile, expandLeftPane, collapseLeftPane]);

  if (isMobile) {
    return (
      <div className={styles.mobileLayout}>
        <div className={styles.mobileArtifact}>
          <ArtifactView />
        </div>

        <div
          className={`${styles.mobileChatPanel} ${
            isLeftPaneExpanded
              ? styles.mobileChatExpanded
              : styles.mobileChatCollapsed
          }`}
        >
          <button
            onClick={collapseLeftPane}
            className={styles.mobileCloseButton}
            aria-label="Close chat"
          >
            <svg
              className={styles.mobileCloseIcon}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
          <div className={`${styles.mobileChatContent} overflow-y-auto h-full`}>
            <div className={styles.mobileMessagesOnly}>{children}</div>
          </div>
        </div>

        <div className={styles.mobileInputFixed} ref={inputRef}>
          <button
            onClick={toggleLeftPane}
            className={styles.mobileToggle}
            aria-label={isLeftPaneExpanded ? "Collapse chat" : "Expand chat"}
          >
            <svg
              className={`${styles.mobileChevron} ${
                isLeftPaneExpanded
                  ? styles.mobileChevronDown
                  : styles.mobileChevronUp
              }`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 15l7-7 7 7"
              />
            </svg>
          </button>
          <div className="ml-6 w-full">
            <SendMessageInput />
          </div>
        </div>
      </div>
    );
  } else {
    return (
      <div className="flex h-screen overflow-hidden">
        <div
          className="flex flex-col"
          style={{ width: `${leftWidth}px`, minWidth: `${MIN_WIDTH}px` }}
        >
          <SplitViewContext.Provider
            value={{ containerWidth: leftWidth, isCompact }}
          >
            <main className="flex-grow overflow-hidden">{children}</main>
          </SplitViewContext.Provider>
        </div>
        <div
          className="w-1 bg-gray-200 cursor-col-resize"
          onMouseDown={startResize}
        />

        <div
          className="relative h-screen"
          style={{ width: `calc(100% - ${leftWidth}px)` }}
        >
          <div className="absolute w-full h-full">
            <ArtifactView />
          </div>
        </div>
      </div>
    );
  }
};

export default SplitViewLayout;
</file>

<file path="src/components/StartGuest.tsx">
"use client";

import { useState } from "react";
import { v4 as uuidv4 } from "uuid";

import BaseLayout from "@/components/BaseLayout";
import { useRouter, useSearchParams } from "next/navigation";
import { useTranslations } from "next-intl";

const StartGuest = () => {
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const t = useTranslations();

  const router = useRouter();
  const searchParams = useSearchParams();

  const startTest = async () => {
    setIsLoading(true);
    setError(null);
    const newThreadId = uuidv4();

    setIsLoading(false);

    const queryString = searchParams.toString();
    const url = `/conversation/${newThreadId}${
      queryString ? `?${queryString}` : ""
    }`;
    router.push(url);
  };

  return (
    <BaseLayout>
      <div className="flex flex-col gap-8">
        <div className="overflow-y-auto relative">
          {error && (
            <div className="text-center">
              <input
                className="container"
                type="text"
                placeholder={error}
                aria-invalid="true"
                readOnly
              />
            </div>
          )}

          <div className="container max-w-3xl text-black">
            {t("start_guest_message")}
          </div>
        </div>

        {error && (
          <input
            readOnly
            aria-invalid="true"
            className="border-red-500 text-red-600 mb-4"
            value={`Error: ${error}`}
          />
        )}

        <button
          onClick={startTest}
          className="action-btn w-full"
          aria-busy={isLoading}
          disabled={isLoading}
        >
          {isLoading ? "Starting..." : t("start_guest_button")}
        </button>
      </div>
    </BaseLayout>
  );
};

export default StartGuest;
</file>

<file path="src/components/TextInput.module.scss">
.textareaWrapper {
  opacity: 1 !important;
  background: var(--gradientTurquoise) !important;
  border-radius: 10px;
  margin: 0;
  padding: 0;

  @media (max-width: 767px) {
    width: calc(100% - 2rem);
    margin: 0 auto;
  }
}

.textareaWrapper:has(textarea:disabled) {
  opacity: 0.5 !important;
  pointer-events: none;
}
</file>

<file path="src/components/TextInput.tsx">
"use client";
import { useTranslations } from "next-intl";
import Image from "next/image";
import {
  useEffect,
  useImperativeHandle,
  useRef,
  useState,
  forwardRef,
} from "react";
import styles from "./TextInput.module.scss";

type TextInputProps = {
  inputEnabled: boolean;
  placeholder?: string;
  onSubmit: (text: string) => void;
};

export type TextInputRef = {
  focusInput: () => void;
};

const TextInput = forwardRef<TextInputRef, TextInputProps>(
  ({ inputEnabled, placeholder, onSubmit }, ref) => {
    const [typedText, setTypedText] = useState("");
    const textareaRef = useRef<HTMLTextAreaElement | null>(null);

    const t = useTranslations();

    useImperativeHandle(ref, () => ({
      focusInput: () => {
        textareaRef.current?.focus();
      },
    }));

    useEffect(() => {
      requestAnimationFrame(() => adjustHeight());
    });

    const submitMessage = () => {
      onSubmit(typedText);
      setTypedText("");
      requestAnimationFrame(() => adjustHeight());

      if (
        typeof window !== "undefined" &&
        window.mobileLayoutControls?.isMobile
      ) {
        window.mobileLayoutControls.collapseLeftPane();
      }
    };

    const adjustHeight = () => {
      const textarea = textareaRef.current;
      if (!textarea) return;
      textarea.style.height = "auto";
      textarea.style.overflowY = "hidden";
      const lineHeight =
        parseFloat(getComputedStyle(textarea).lineHeight) || 30;
      const maxHeight = lineHeight * 4;
      textarea.style.height = textarea.scrollHeight + "px";
      if (textarea.scrollHeight > maxHeight) {
        textarea.style.height = maxHeight + "px";
        textarea.style.overflowY = "auto";
      }
    };

    const handleFocus = () => {
      if (
        typeof window !== "undefined" &&
        window.mobileLayoutControls?.isMobile
      ) {
        window.mobileLayoutControls.expandLeftPane();
      }
    };

    return (
      <div className={`relative ${styles.textareaWrapper}`}>
        <textarea
          ref={textareaRef}
          className="rounded-xl relative min-w-64"
          name="chatInput"
          placeholder={placeholder || t("input_placeholder")}
          aria-disabled={!inputEnabled}
          disabled={!inputEnabled}
          required
          value={typedText}
          onChange={(e) => {
            setTypedText(e.target.value);
            adjustHeight();
          }}
          onKeyDown={(e) => {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              submitMessage();
            }
          }}
          onFocus={handleFocus}
          rows={1}
          style={{
            lineHeight: "2em",
            maxHeight: "7em",
            overflow: "hidden",
          }}
        />
        <a
          href="#"
          onClick={(e) => {
            e.preventDefault();
            submitMessage();
          }}
        >
          <Image
            alt=""
            width="21"
            height="21"
            src="/assets/images/icon_paperplane.svg"
            className="absolute bottom-[1.1rem] right-4"
          />
        </a>
      </div>
    );
  }
);

TextInput.displayName = "TextInput";
export default TextInput;
</file>

<file path="src/context/AgentStreamProvider.tsx">
"use client";

import { useAgentStream } from "@/lib/hooks/useAgentStream";
import React, { createContext, useContext, ReactNode } from "react";

const StreamContext = createContext<ReturnType<typeof useAgentStream> | null>(
  null
);

export const useAgentStreamContext = () => {
  const context = useContext(StreamContext);
  if (!context) {
    throw new Error(
      "useAgentStreamContext must be used within an AgentStreamProvider"
    );
  }
  return context;
};

interface AgentStreamProviderProps {
  children: ReactNode;
}

export const AgentStreamProvider = ({ children }: AgentStreamProviderProps) => {
  const stream = useAgentStream(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/stream` ||
      "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app/stream"
  );

  return (
    <StreamContext.Provider value={stream}>{children}</StreamContext.Provider>
  );
};
</file>

<file path="src/context/AuthContext.tsx">
"use client";

import {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react";
import {
  onAuthStateChanged,
  signInAnonymously,
  setPersistence,
  browserLocalPersistence,
  signOut as firebaseSignOut,
  signInWithEmailAndPassword as firebaseSignInWithEmailAndPassword,
  User,
} from "firebase/auth";
import { auth } from "@/lib/auth";

type AuthContextType = {
  user: User | null;
  loading: boolean;
  signOut: () => Promise<void>;
  signInWithEmail: (email: string, password: string) => Promise<void>;
};

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  signOut: async () => {},
  signInWithEmail: async () => {},
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const setupAuth = async () => {
      try {
        await setPersistence(auth, browserLocalPersistence);

        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
          try {
            if (firebaseUser) {
              setUser(firebaseUser);
            } else if (process.env.NEXT_PUBLIC_ALLOW_ANONYMOUS === "true") {
              const result = await signInAnonymously(auth);
              setUser(result.user);
            } else {
              setUser(null);
            }
          } catch (err) {
            console.error("Error during anonymous sign-in:", err);
          } finally {
            setLoading(false);
          }
        });

        return unsubscribe;
      } catch (err) {
        console.error("Auth setup error:", err);
        setLoading(false);
      }
    };

    const unsubscribePromise = setupAuth();

    return () => {
      unsubscribePromise.then((unsubscribe) => {
        if (typeof unsubscribe === "function") unsubscribe();
      });
    };
  }, []);

  const signOut = async () => {
    await firebaseSignOut(auth);
    setUser(null);
  };

  const signInWithEmail = async (email: string, password: string) => {
    const result = await firebaseSignInWithEmailAndPassword(
      auth,
      email,
      password
    );
    setUser(result.user);
  };

  if (loading) {
    return null;
  }

  return (
    <AuthContext.Provider
      value={{ user, loading: false, signOut, signInWithEmail }}
    >
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="src/context/TaskContext.tsx">
"use client";

import {
  createContext,
  useContext,
  useState,
  useCallback,
  ReactNode,
} from "react";
import { Task } from "@/types/generic";

type TaskContextType = {
  tasks: Task[];
  currentTaskIndex: number;
  updateTasks: (tasks: Task[], index: number) => void;
};

const TaskContext = createContext<TaskContextType>({
  tasks: [],
  currentTaskIndex: 0,
  updateTasks: () => {},
});

export const useTaskContext = () => useContext(TaskContext);

export const TaskProvider = ({ children }: { children: ReactNode }) => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);

  const updateTasks = useCallback((newTasks: Task[], index: number) => {
    setTasks(newTasks);
    setCurrentTaskIndex(index);
  }, []);

  return (
    <TaskContext.Provider value={{ tasks, currentTaskIndex, updateTasks }}>
      {children}
    </TaskContext.Provider>
  );
};
</file>

<file path="src/domain/artifact.ts">
export interface ArtifactIdDictionary {
  [key: string]: any[];
}

export const parseArtifactPayload = <T>(
  payload: { [key: string]: unknown } | null | undefined
): T => {
  return typeof payload === "object" && payload !== null
    ? (payload as T)
    : ({} as T);
};
</file>

<file path="src/domain/constants.ts">
export enum ArtifactType {
  Markdown = "markdown",
  MarkdownEditor = "markdown_editor",
  JsonForm = "json_form",
  TaskInstruction = "task_instruction",
  TaskEvaluation = "task_evaluation",
  ChatTask = "chat_task",
  EvaluateAll = "evaluate_all",
}

export enum Role {
  AI = "ai",
  TOOL = "tool",
  HUMAN = "human",
  CUSTOM = "custom",
}
</file>

<file path="src/domain/conversation.ts">
import { ChatHistory, historyHistoryPost } from "@/client";
import { customClient } from "@/lib/api";

import { NetworkingError } from "@/types/generic";

export const getConversation = async (
  uuid: string
): Promise<ChatHistory | NetworkingError> => {
  try {
    const response = await historyHistoryPost({
      client: customClient,
      body: { thread_id: uuid },
    });
    if (!response.data) {
      return new NetworkingError(null, "No conversation returned");
    }
    return response.data;
  } catch (err: unknown) {
    const message = err instanceof Error ? err.message : "unknown error";
    return new NetworkingError(null, message);
  }
};
</file>

<file path="src/domain/custom-highlight.ts">
import { Mark } from '@tiptap/core';
import { EditorState, Transaction } from 'prosemirror-state';
import {
  Mark as ProseMirrorMark,
  Node as ProseMirrorNode,
} from 'prosemirror-model';

export interface CustomExtensionOptions {
  multicolor: boolean;
  onHighlight?: (selectedText: string) => void;
}

declare module '@tiptap/core' {
  interface Commands<ReturnType> {
    customExtension: {
      /**
       * Comments will be added to the autocomplete.
       */
      unsetAllHighlights: (someProp: unknown) => ReturnType;
      customHighlight: (color: string) => ReturnType;
    };
  }
}

const CustomHighlight = Mark.create<CustomExtensionOptions>({
  name: 'customHighlight',

  addOptions() {
    return {
      multicolor: false, // Optional: Add multicolor support like the Highlight extension
    };
  },

  addAttributes() {
    return {
      color: {
        default: null,
        parseHTML: (element) => element.getAttribute('data-color'),
        renderHTML: (attributes) => {
          if (!attributes.color) {
            return {};
          }

          return {
            'data-color': attributes.color,
            style: `background-color: ${attributes.color};`,
          };
        },
      },
    };
  },

  parseHTML() {
    return [
      {
        tag: 'mark[data-color]',
      },
    ];
  },

  renderHTML({ HTMLAttributes }) {
    return ['mark', HTMLAttributes, 0];
  },

  addCommands() {
    return {
      customHighlight:
        (color: string) =>
        ({ commands, editor }) => {
          const { from, to } = editor.state.selection;
          const selectedText = editor.state.doc.textBetween(from, to, ' ');

          // Dispatch the selected text for external handling
          if (this.options.onHighlight) {
            this.options.onHighlight(selectedText); // Pass the selected text to the Vue component
          }

          return commands.setMark(this.name, { color });
        },
      unsetAllHighlights:
        () =>
        ({
          state,
          dispatch,
        }: {
          state: EditorState;
          dispatch: ((tr: Transaction) => void) | undefined;
        }) => {
          const { doc, tr } = state; // Access the document and transaction

          // Traverse the document and remove all customHighlight marks
          doc.descendants((node: ProseMirrorNode, pos: number) => {
            if (node.isText && node.marks.length) {
              node.marks.forEach((mark: ProseMirrorMark) => {
                if (mark.type.name === 'customHighlight') {
                  tr.removeMark(pos, pos + node.nodeSize, mark.type);
                }
              });
            }
          });

          // Apply the transaction if any changes were made
          if (dispatch) {
            dispatch(tr);
            return true;
          }

          return false;
        },
    };
  },
});

export default CustomHighlight;
</file>

<file path="src/domain/custom-keymaping.ts">
import { Extension } from "@tiptap/core";
import { keymap } from "prosemirror-keymap";
import { EditorState, Transaction } from "prosemirror-state";

export const CodeBlockNewlineFix = Extension.create({
  name: "codeBlockNewlineFix",

  addProseMirrorPlugins() {
    return [
      keymap({
        Enter(
          state: EditorState,
          dispatch?: (tr: Transaction) => void
        ): boolean {
          const { $head } = state.selection;
          if ($head.parent.type.name === "codeBlock") {
            if (dispatch) {
              dispatch(state.tr.insertText("\n"));
            }
            return true;
          }
          return false;
        },
        "Shift-Enter"(
          state: EditorState,
          dispatch?: (tr: Transaction) => void
        ): boolean {
          const { $head } = state.selection;
          if ($head.parent.type.name === "codeBlock") {
            if (dispatch) {
              dispatch(state.tr.insertText("\n"));
            }
            return true;
          }
          return false;
        },
      }),
    ];
  },
});
</file>

<file path="src/domain/custom-math-block.ts">
// MathBlock.ts

import { Node, nodeInputRule, mergeAttributes } from "@tiptap/core";

export interface MathBlockOptions {
  /**
   * Callback to be called when a math block is inserted or parsed.
   */
  onInsert?: (formula: string) => void;
}

declare module "@tiptap/core" {
  interface Commands<ReturnType> {
    mathBlock: {
      /**
       * Inserts a mathBlock node with the specified formula.
       */
      setMathBlock: (formula: string) => ReturnType;
    };
  }
}

export const MathBlock = Node.create<MathBlockOptions>({
  name: "mathBlock",

  group: "block",

  // Removed 'atom: true' to allow proper block-level behavior
  // atom: true,

  addAttributes() {
    return {
      formula: {
        default: "",
      },
    };
  },

  parseHTML() {
    return [
      {
        tag: "div[data-block-math]",
        priority: 1000,
        getAttrs: (el) => {
          const element = el as HTMLElement;
          const formula = element.textContent?.trim() || "";
          return { formula };
        },
      },
      {
        tag: "p",
        priority: 1000,
        getAttrs: (el) => {
          const element = el as HTMLElement;
          const text = element.textContent?.trim() || "";

          const match = text.match(/^\$\$\s*([\s\S]+?)\s*\$\$$/);
          if (match) {
            const formula = match[1].trim();
            if (this.options.onInsert) {
              this.options.onInsert(formula);
            }
            return { formula };
          }

          return false; // Do not parse as MathBlock if no match
        },
      },
    ];
  },

  renderHTML({ node, HTMLAttributes }) {
    const merged = mergeAttributes(HTMLAttributes, {
      "data-block-math": "true",
    });
    return ["div", merged, node.attrs.formula];
  },

  addCommands() {
    return {
      setMathBlock:
        (formula: string) =>
        ({ commands }) => {
          return commands.insertContent({
            type: this.name,
            attrs: { formula },
          });
        },
    };
  },

  addInputRules() {
    return [
      nodeInputRule({
        find: /\$\$\s*([\s\S]+?)\s*\$\$/,
        type: this.type,
        getAttributes: (match) => {
          const formula = match[1].trim();
          if (this.options.onInsert) {
            this.options.onInsert(formula);
          }
          return { formula };
        },
      }),
    ];
  },
});

export default MathBlock;
</file>

<file path="src/domain/custom-tab-extension.ts">
import { Extension } from '@tiptap/core'

const TAB_CHAR = '\u0009';

export const CustomTabExtension = Extension.create({
  addKeyboardShortcuts() {
    return {
      Tab: () => {
        // Using the Tiptap chain/command API
        this.editor
          .chain()
          // If you also want to indent list items (optional):
          .sinkListItem('listItem')
          .command(({ tr }) => {
            // Insert 4 spaces at the current cursor position
            tr.insertText(TAB_CHAR)
            return true
          })
          .run()

        // Return true to stop the default behavior
        return true
      },
    }
  },
})
</file>

<file path="src/domain/markdown-service.ts">
import MarkdownIt from "markdown-it";
import TurndownService from "turndown";

// Convert markdown to HTML
export const formatMarkdownHtml = (text: string): string => {
  const md = new MarkdownIt();
  return md.render(text);
};

// Convert HTML to markdown
export const formatHtmlMarkdown = (html: string): string => {
  const turndownService = new TurndownService({
    bulletListMarker: "-",
  });

  // Optional: custom escaping of markdown syntax
  const markdownReplacements: [RegExp, string][] = [
    [/\\/g, "\\\\"],
    [/\*/g, "\\*"],
    [/^-/g, "\\-"],
    [/^\+ /g, "\\+ "],
    [/^(=+)/g, "\\$1"],
    [/^(#{1,6}) /g, "\\$1 "],
    [/`/g, "\\`"],
    [/^~~~/g, "\\~~~"],
    [/^>/g, "\\>"],
    [/_/g, "\\_"],
    [/^(\d+)\. /g, "$1\\. "],
  ];

  turndownService.escape = (text: string): string =>
    markdownReplacements.reduce(
      (result, [regex, replacement]) => result.replace(regex, replacement),
      text
    );

  return turndownService.turndown(html);
};

type MarkdownChunk =
  | { type: "markdown"; content: string }
  | { type: "code"; language: string; content: string };

export function splitMarkdownIntoChunks(markdown: string): MarkdownChunk[] {
  const chunks: MarkdownChunk[] = [];
  const codeBlockRegex = /```([^\s]*)\n([\s\S]*?)```/g;

  let lastIndex = 0;
  let match: RegExpExecArray | null;

  while ((match = codeBlockRegex.exec(markdown)) !== null) {
    const [fullMatch, lang = "", code] = match;
    const index = match.index;

    // Push the plain markdown before the code block
    if (index > lastIndex) {
      chunks.push({
        type: "markdown",
        content: markdown.slice(lastIndex, index),
      });
    }

    // Push the code block
    chunks.push({
      type: "code",
      language: lang,
      content: code,
    });

    lastIndex = index + fullMatch.length;
  }

  // Any remaining markdown after the last code block
  if (lastIndex < markdown.length) {
    chunks.push({
      type: "markdown",
      content: markdown.slice(lastIndex),
    });
  }

  return chunks;
}
</file>

<file path="src/domain/persistent-code-block.ts">
import { Extension } from "@tiptap/core";
import { Plugin, PluginKey, TextSelection } from "prosemirror-state";

export const PersistentCodeBlock = Extension.create({
  name: "persistentCodeBlock",

  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("persistentCodeBlock"),
        appendTransaction: (transactions, oldState, newState) => {
          const { doc } = newState;

          // if doc has no codeBlock anymore
          if (
            doc.childCount !== 1 ||
            doc.firstChild?.type.name !== "codeBlock"
          ) {
            const tr = newState.tr;

            const emptyCodeBlock = newState.schema.nodes.codeBlock.create(
              doc.firstChild?.attrs ?? {},
              []
            );

            tr.replaceWith(0, doc.content.size, emptyCodeBlock);

            tr.setSelection(TextSelection.create(tr.doc, 1));

            return tr;
          }

          return null;
        },
      }),
    ];
  },
});
</file>

<file path="src/i18n/navigation.ts">
import { createNavigation } from "next-intl/navigation";
import { routing } from "./routing";

export const { Link, redirect, usePathname, useRouter, getPathname } =
  createNavigation(routing);
</file>

<file path="src/i18n/request.ts">
import { getRequestConfig } from "next-intl/server";
import { hasLocale } from "next-intl";
import { routing } from "./routing";

export default getRequestConfig(async ({ requestLocale }) => {
  const requested = await requestLocale;
  const locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;

  return {
    locale,
    messages: (await import(`../../messages/${locale}.json`)).default,
  };
});
</file>

<file path="src/i18n/routing.ts">
import { defineRouting } from "next-intl/routing";

export const routing = defineRouting({
  locales: ["en", "de", "ro", "it", "es"],
  defaultLocale: "de",
});
</file>

<file path="src/lib/hooks/useAgentStream.ts">
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { useCallback, useRef, useState } from "react";
import { useLocale } from "./useLocale";
import { useTaskContext } from "@/context/TaskContext";
import { ChatHistory, ChatMessage } from "@/client";

export interface StreamOptions {
  agent_id?: string;
  message?: string;
  model?: string;
  thread_id: string;
  user_id: string;
  agent_config?: Record<string, unknown>;
  stream_tokens?: boolean;
  run_id?: string;
}

export interface Artifact {
  id: string;
  node?: string;
  type?: string;
  title?: string;
  content: any;
  status?: string;
  meta?: Record<string, unknown>;
}

type ExtendedChatMessage = ChatMessage & {
  id: string;
  role?: string;
  meta?: ChatMessage["custom_data"];
} & Omit<ChatMessage, "type">;

function getParsedArtifactContent(artifact: Artifact): any {
  try {
    if (
      typeof artifact?.content === "string" &&
      !artifact.id.startsWith("streaming_")
    ) {
      const trimmed = artifact.content.trim();
      const isLikelyJson =
        (trimmed.startsWith("{") && trimmed.endsWith("}")) ||
        (trimmed.startsWith("[") && trimmed.endsWith("]"));
      if (isLikelyJson) {
        return JSON.parse(trimmed);
      }
    }

    return artifact?.content ?? {};
  } catch (err) {
    console.warn("Failed to parse artifact content:", artifact?.content, err);
    return artifact?.content ?? {};
  }
}

export function useAgentStream(endpoint: string) {
  const [chatMessages, setChatMessages] = useState<ExtendedChatMessage[]>([]);
  const [artifacts, setArtifacts] = useState<Artifact[]>([]);
  const [isStreaming, setIsStreaming] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const chatRef = useRef<Record<string, string>>({});
  const artifactRef = useRef<Record<string, string>>({});
  const localUserMessages = useRef<ExtendedChatMessage[]>([]);
  const messageBufferRef = useRef("");

  const locale = useLocale();
  const { updateTasks } = useTaskContext();

  const reset = () => {
    chatRef.current = {};
    artifactRef.current = {};
    localUserMessages.current = [];
    messageBufferRef.current = "";
    setChatMessages([]);
    setArtifacts([]);
  };

  const sendUserMessage = (text: string) => {
    const message = {
      id: `human_${Date.now()}`,
      role: "human",
      content: text,
    } as ExtendedChatMessage;
    localUserMessages.current.push(message);
    setChatMessages((prev) => [...prev, message]);
  };

  const loadHistory = (messages: ChatHistory["messages"]) => {
    const loadedMessagesMap: Record<string, ExtendedChatMessage> = {};
    const loadedArtifactsMap: Record<string, Artifact> = {};

    for (const [index, message] of messages.entries()) {
      if (!message.content?.trim()) continue;

      if (message.type === "tool") {
        try {
          let toolData: any;
          const isJson =
            message.content.trim().startsWith("{") ||
            message.content.trim().startsWith("[");

          if (isJson) {
            toolData = JSON.parse(message.content);
          } else {
            toolData = {
              artifact_type: "markdown",
              artifact_title: "Task Instructions",
              artifact_content: message.content,
            };
          }

          const artifactContent =
            toolData.artifact_content?.trim?.() ||
            toolData.task_content?.content?.trim?.();

          if (artifactContent) {
            const id = message.tool_call_id ?? `history_tool_${index}`;
            loadedArtifactsMap[id] = {
              id,
              type: toolData.artifact_type ?? toolData.task_type ?? "unknown",
              title:
                toolData.artifact_title ?? toolData.task_title ?? "Untitled",
              content: toolData,
              status: toolData.status,
            };
          }
        } catch (err) {
          console.warn(
            "Failed to parse or use tool message from history:",
            message.content,
            err
          );
        }
        continue;
      }

      const id = (message.custom_data?.run_id as string) ?? `history_${index}`;
      const role = message.type === "human" ? "human" : "ai";
      const isChat = message.custom_data?.metadata?.type === "chat";

      if (isChat || role === "human") {
        const chat: ExtendedChatMessage = {
          id,
          role,
          content: message.content,
          meta: message.custom_data ?? {},
        };

        loadedMessagesMap[id] = chat;
        if (role === "human") localUserMessages.current.push(chat);
      }
    }

    const lastAiWithTasks = Object.values(loadedMessagesMap)
      .reverse()
      .find((m) => m.role === "ai" && m.meta?.all_tasks_summary);

    if (lastAiWithTasks) {
      updateTasks(
        lastAiWithTasks?.meta?.all_tasks_summary,
        lastAiWithTasks.meta.current_task_index_at_response ?? 0
      );
    }

    setChatMessages(Object.values(loadedMessagesMap));
    setArtifacts(Object.values(loadedArtifactsMap));
  };

  const clearArtifacts = () => {
    setArtifacts([]);
  };

  const stream = useCallback(
    async (options: StreamOptions, token?: string) => {
      setIsStreaming(true);
      setError(null);
      chatRef.current = {};
      artifactRef.current = {};
      messageBufferRef.current = "";

      if (options.message) sendUserMessage(options.message);

      try {
        const res = await fetch(
          endpoint + `?agent_id=${options.agent_id ?? ""}`,
          {
            method: "POST",
            headers: {
              Accept: "text/event-stream",
              "Content-Type": "application/json",
              ...(token && { Authorization: `Bearer ${token}` }),
            },
            body: JSON.stringify({
              user_input: {
                ...options,
                agent_config: { ...options?.agent_config, language: locale },
              },
            }),
          }
        );

        if (!res.ok || !res.body)
          throw new Error(`Stream error: ${res.statusText}`);

        const reader = res.body.getReader();
        const decoder = new TextDecoder("utf-8");
        let buffer = "";

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          buffer += decoder.decode(value, { stream: true });
          const lines = buffer.split("\n");
          buffer = lines.pop() || "";

          for (const line of lines) {
            if (!line.startsWith("data: ")) continue;
            const raw = line.slice(6).trim();
            if (raw === "[DONE]") {
              setIsStreaming(false);
              return;
            }

            try {
              const payload = JSON.parse(raw);

              if (payload.type === "token") {
                const node = payload.langgraph_node;
                const isChat = node === "controller_llm";
                const isChatMessage =
                  payload.custom_data?.metadata?.type === "chat";

                if (isChat && isChatMessage) {
                  // ————— unchanged chat logic —————
                  chatRef.current[node] =
                    (chatRef.current[node] || "") + payload.content;
                  const draft = {
                    id: "streaming_" + node,
                    role: "ai",
                    content: chatRef.current[node],
                  } as ExtendedChatMessage;
                  setChatMessages((prev) => [
                    ...prev.filter(
                      (m) => m.id !== draft.id && !m.id.startsWith("streaming_")
                    ),
                    draft,
                  ]);
                } else {
                  // ————— new: tool-artifact streaming draft —————
                  const meta = payload.custom_data?.metadata ?? {};
                  const artifactType = meta.artifact_type as string | undefined;

                  artifactRef.current[node] =
                    (artifactRef.current[node] || "") + payload.content;

                  const draft: Artifact = {
                    id: "streaming_" + node,
                    node,
                    type: artifactType,
                    title: undefined,
                    content: artifactRef.current[node],
                    status: "streaming",
                    meta,
                  };

                  setArtifacts((prev) => {
                    const draftExists = prev.some((a) => a.id === draftId);
                    if (draftExists) {
                      // If a streaming draft exists, map and update it.
                      return prev.map((a) => (a.id === draftId ? complete : a));
                    } else {
                      // Otherwise, add the new complete artifact to the array.
                      return [...prev, complete];
                    }
                  });
                }
              }

              if (payload.type === "message") {
                handleFinalMessage(payload.content, payload.custom_data);
              }
            } catch {
              messageBufferRef.current += raw;
              try {
                const payload = JSON.parse(messageBufferRef.current);
                handleFinalMessage(payload.content, payload.custom_data);
                messageBufferRef.current = "";
              } catch {
                // still incomplete
              }
            }
          }
        }
      } catch (err: any) {
        setIsStreaming(false);
        setError(err.message ?? "Unknown error");
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [endpoint, locale, updateTasks]
  );

  const handleFinalMessage = (final: any, sseMeta: any) => {
    const role = final.type === "ai" ? "ai" : final.type;

    if (role === "ai") {
      if (
        final?.custom_data?.metadata?.type !== "chat" ||
        !final.content?.trim()
      ) {
        console.debug("Skipped non-chat or empty AI message", final);
        return;
      }

      const finalChat: ExtendedChatMessage = {
        id: final.run_id,
        role,
        content: final.content,
        meta: final.custom_data,
      };

      if (final?.custom_data?.all_tasks_summary) {
        updateTasks(
          final.custom_data.all_tasks_summary,
          final.custom_data.current_task_index_at_response ?? 0
        );
      }

      setChatMessages((prev) => {
        const filtered = prev.filter(
          (m) => m.id !== final.run_id && !m.id.startsWith("streaming_")
        );
        return [...filtered, finalChat];
      });

      delete chatRef.current["controller_llm"];
    } else if (role === "tool") {
      try {
        const isJson =
          typeof final.content === "string" &&
          (final.content.trim().startsWith("{") ||
            final.content.trim().startsWith("["));
        const toolData = isJson
          ? JSON.parse(final.content)
          : {
              artifact_type: "markdown",
              artifact_title: "Tool Output",
              artifact_content: final.content,
            };
  
        const isForm = toolData.artifact_type === "json_form";
        const artifactCompleteContent = isForm
          ? toolData
          : toolData.artifact_content?.trim?.() ||
            toolData.task_content?.content?.trim?.();
  
        if (!artifactCompleteContent) {
          console.debug("Skipped empty tool artifact", toolData);
          return;
        }
  
        const node = sseMeta.node ?? sseMeta.langgraph_node;
        const draftId = `streaming_${node}`;
        const finalId = final.tool_call_id || draftId;
  
        const complete: Artifact = {
          id: finalId,
          node,
          type: toolData.artifact_type ?? toolData.task_type ?? "unknown",
          title: toolData.artifact_title ?? toolData.task_title ?? "Untitled",
          content: artifactCompleteContent,
          status: "complete",
          meta: toolData,
        };
  
        setArtifacts((prev) => {
          const draftExists = prev.some((a) => a.id === draftId);
          if (draftExists) {
            // If a streaming draft exists, map and update it.
            return prev.map((a) => (a.id === draftId ? complete : a));
          } else {
            // Otherwise, add the new complete artifact to the array.
            return [...prev, complete];
          }
        });
        delete artifactRef.current[node];
      } catch (err) {
        console.warn("Failed to finalize tool artifact:", final, err);
      }
    }
  };

  return {
    chatMessages,
    artifacts,
    isStreaming,
    error,
    sendMessage: stream,
    reset,
    loadHistory,
    getParsedArtifactContent,
    clearArtifacts,
  };
}
</file>

<file path="src/lib/hooks/useAuthGuard.ts">
"use client";

import { useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuth } from "@/context/AuthContext";

export const useAuthGuard = () => {
  const router = useRouter();
  const pathname = usePathname();
  const { user, loading } = useAuth();

  useEffect(() => {
    if (loading) return;

    const onSignIn = pathname === "/signin";

    if (!user && !onSignIn) {
      router.replace("/signin");
      return;
    }

    if (user && onSignIn) {
      router.replace("/");
      return;
    }

    if (user) {
      router.replace("/");
    }
  }, [pathname, user, loading, router]);
};
</file>

<file path="src/lib/hooks/useLocale.ts">
"use client";

import { usePathname } from "next/navigation";

export const useLocale = (): string => {
  const pathname = usePathname();
  const locale = pathname?.split("/")?.[1] || "en";
  return locale;
};
</file>

<file path="src/lib/hooks/useNormalizedParam.ts">
import { useParams } from "next/navigation";

export const useNormalizedParam = (key: string): string | undefined => {
  const params = useParams();
  const value = params?.[key];
  if (Array.isArray(value)) return value[0];
  return typeof value === "string" ? value : undefined;
};
</file>

<file path="src/lib/api.ts">
import { createClient, createConfig } from "@hey-api/client-fetch";
import { type ClientOptions } from "@/client/types.gen";
import { auth } from "@/lib/auth";

let authToken: string | undefined = undefined;

let tokenReadyResolver: (() => void) | null = null;
const tokenReady = new Promise<void>((resolve) => {
  tokenReadyResolver = resolve;
});

auth.onIdTokenChanged(async (user) => {
  if (user) {
    try {
      authToken = await user.getIdToken();
    } catch (err) {
      console.error("Failed to refresh token", err);
      authToken = undefined;
    }
  } else {
    authToken = undefined;
  }

  if (tokenReadyResolver) {
    tokenReadyResolver();
    tokenReadyResolver = null;
  }
});

const baseUrl =
  process.env.NEXT_PUBLIC_BACKEND_URL ||
  "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app";

export const customClient = createClient(
  createConfig<ClientOptions>({
    baseUrl,
    async fetch(request: Request): Promise<Response> {
      await tokenReady;

      const headers = new Headers(request.headers);
      if (authToken) {
        headers.set("Authorization", `Bearer ${authToken}`);
      }

      const modifiedRequest = new Request(request, {
        headers,
        credentials: "include",
      });

      return fetch(modifiedRequest);
    },
  })
);
</file>

<file path="src/lib/auth.ts">
import { initializeApp } from "firebase/app";
import {
  getAuth,
  GoogleAuthProvider,
  signInAnonymously,
  signInWithPopup,
  signOut,
  type User,
} from "firebase/auth";
import config from "@/config";

export const firebaseApp = initializeApp(config.firebaseConfig);
export const auth = getAuth(firebaseApp);

const provider = new GoogleAuthProvider();

provider.setCustomParameters({
  hd: "deyan7.de",
});

export const googleSignIn = async (): Promise<User | null> => {
  try {
    const result = await signInWithPopup(auth, provider);
    const email = result.user.email;

    if (!email?.endsWith("@deyan7.de")) {
      console.error("Unauthorized domain:", email);
      await signOut(auth);
      return null;
    }

    return result.user;
  } catch (error) {
    console.error("Google Sign-In Error:", error);
    return null;
  }
};

export const ensureAnonymousUser = async (): Promise<void> => {
  if (!auth.currentUser) {
    await signInAnonymously(auth);
  }
};
</file>

<file path="src/styles/custom.scss">
/* -------------------------------
   Theme Variables
-------------------------------- */
:root {
  /* Brand Colors */
  --rosewood: #730C16;
  --rosewood-dark: #5A0B0E;
  --melon: #F6BDB6;
  --red-crayola: #E84C5A;
  
  /* Legacy color mappings for compatibility */
  --darkblue: #FFFFFF;  /* Was #051543 */
  --orange: #730C16;    /* Was #FE5000 - now rosewood */
  --purple: #E84C5A;    /* Was #9b82ff - now red */
  --turquoise: #E84C5A; /* Was #58d8ff - now red */
  --blue: #F6BDB6;      /* Was #6090f4 - now melon */
  --grey: #666666;      /* Keeping neutral grey */

  --deepNavy: #FFFFFF;           /* Was #030e2e */
  --deepNavyTransparent: #FFFFFFee; /* Was #030e2ecc */
  --royalIndigo: #F6BDB6;        /* Was #0c1a42 - now melon */

  /* Gradients */
  --gradientHeadline: linear-gradient(
    45deg,
    var(--rosewood),
    var(--red-crayola),
    var(--melon)
  );
  --gradientTurquoise: linear-gradient(0deg, var(--melon), var(--red-crayola));
  --gradientOrange: linear-gradient(0deg, var(--red-crayola), var(--rosewood));
  --gradientDarkblue: linear-gradient(0deg, #FFFFFF, #FAFAFA);

  /* Component specific */
  --color: #000000 !important;
  --artifact-bg: #F5F5F5;
  --form-element-spacing-vertical: 0.5rem;
  
  /* Scrollbar */
  --scrollbar-color: rgba(115, 12, 22, 0.3);
}

/* -------------------------------
   Fonts
-------------------------------- */
@font-face {
  font-display: swap;
  font-family: "Lato";
  font-style: normal;
  font-weight: 300;
  src: url("/assets/fonts/lato-v24-latin-300.woff2") format("woff2");
}

@font-face {
  font-display: swap;
  font-family: "Lato";
  font-style: normal;
  font-weight: 400;
  src: url("/assets/fonts/lato-v24-latin-regular.woff2") format("woff2");
}

@font-face {
  font-display: swap;
  font-family: "Lato";
  font-style: normal;
  font-weight: 700;
  src: url("/assets/fonts/lato-v24-latin-700.woff2") format("woff2");
}

body,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Lato", sans-serif;
}

p {
  margin-bottom: 2rem;
}

body {
  background-color: #FFFFFF;
  color: #000000;
}

/* -------------------------------
   Utility Classes
-------------------------------- */
.w-1 {
  width: 7px;
  border-right: 3px solid var(--darkblue);
  border-left: 3px solid var(--deepNavy);
}

.text-gray-400 {
  color: var(--grey) !important;
}

.text-orange {
  color: var(--orange);
}

[role="link"],
a,
[role="link"]:is([aria-current], :hover, :active, :focus),
a:is([aria-current], :hover, :active, :focus) {
  --color: var(--rosewood);
}

/* -------------------------------
   Chat + any Styles
-------------------------------- */
.chat-message {
  &.user {
    background-color: var(--melon);
    color: var(--rosewood-dark);
    padding: 0 1rem 0.25rem;
    margin: 1rem 1rem 2rem;
    max-width: 70%;
    border-radius: 1rem;
  }
}

.tiptap {
  outline: none;
  border: none;

  a {
    color: var(--orange);
    text-decoration: underline;
    cursor: pointer;

    &:hover {
      text-decoration: underline;
      opacity: 0.8;
    }
  }

  ul {
    list-style-type: disc;
    padding-left: 2em;
    margin-bottom: 1rem;
  }

  ol {
    list-style-type: decimal;
    padding-left: 2em;
    margin-bottom: 1rem;
  }

  li {
    margin-bottom: 0.5em;
  }

  pre {
    & code {
      color: var(--rosewood-dark);
      border-radius: 9px !important;
      background: linear-gradient(0deg, #FAFAFA, #FFFFFF) !important;
      width: calc(100% - 3px) !important;
      height: calc(100% - 3px);
      margin: 1.5px;
    }

    &:has(code) {
      margin-bottom: 2rem !important;
    }
  }
}

.artifact-action-footer {
  margin-bottom: -2px !important;
}

.ava_title {
  font-size: 0.8125rem;
  font-weight: 500;
  letter-spacing: 0.203125rem;
  text-transform: uppercase;

  @media (max-width: 767px) {
    font-size: 0.65rem;
  }
}

/* -------------------------------
   Heading Styles
-------------------------------- */
h1 {
  background: var(--gradientHeadline);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  display: inline-block;
  --font-size: 1.625rem;
  --font-weight: 400;
}

.ProseMirror {
  h1 {
    background: var(--gradientHeadline) !important;
    -webkit-background-clip: text !important;
    -webkit-text-fill-color: transparent !important;
    display: inline-block;
  }
}

h2 {
  --font-size: 1.4rem;
  --font-weight: 400;
  color: #000000;
  margin-bottom: 1rem;
}

h3 {
  --font-size: 1.2rem;
  --font-weight: 400;
  color: #000000;
  margin-bottom: 1rem;
}

/* -------------------------------
   Form Styles
-------------------------------- */
textarea,
input,
.box_blue,
.tiptap pre code,
pre code {
  border-radius: 9px !important;
  border: 0;
  background: var(--gradientDarkblue) !important;
  width: calc(100% - 3px) !important;
  height: calc(100% - 3px);
  margin: 1.5px;
  position: relative;
}

select {
  border: 1px solid var(--red-crayola) !important;
  border-radius: 9px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  padding: 0.75rem 1rem;
  color: var(--rosewood-dark);
  background: linear-gradient(0deg, #FFFFFF, #FAFAFA) !important;
  width: 100%;
  height: 100%;
  position: relative;
  margin: 1rem 0 0.2rem;
}

textarea {
  padding-right: 2.5rem;

  @supports (-webkit-appearance: none) and (not (-moz-appearance: none)) {
    margin-bottom: -4px;
  }

  &::placeholder {
    color: #666666;
  }

  &:disabled {
    opacity: 1;
  }
}

/* Form Wrappers */

.wrapper:has(select),
.box_blue_wrapper,
.tiptap pre:has(code),
.input_wrapper {
  opacity: 1 !important;
  background: linear-gradient(0deg, var(--melon), var(--red-crayola)) !important;
  border-radius: 10px;
  margin: 0;
  padding: 0;

  @media (max-width: 767px) {
    width: calc(100% - 2rem);
    margin: 0 auto;
  }
}

.wrapper:has(select) {
  position: relative;

  &::after {
    content: "\f078";
    font-family: "Font Awesome 6 Free";
    font-weight: 600;
    font-size: 0.8rem;
    color: var(--rosewood);
    position: absolute;
    right: 1rem;
    top: 0.8rem;
  }
}

/* -------------------------------
   Buttons
-------------------------------- */
.action-btn {
  border-radius: 10px;
  border: 0;
  background: linear-gradient(0deg, var(--red-crayola), var(--rosewood)) !important;
  color: white !important;
  z-index: 1;
  position: relative;
  height: 54.5px;

  &::before {
    content: "";
    position: absolute;
    left: 1.5px;
    top: 1px;
    z-index: -1;
    display: block !important;
    width: calc(100% - 3px);
    height: calc(100% - 3px);
    background-color: var(--rosewood) !important;
    border-radius: 9px;
    opacity: 1 !important;
    margin: 0;
  }
}

/* -------------------------------
   Layout Utilities
-------------------------------- */
.vertical-layout-item {
  margin: 1.25rem 0;

  label {
    margin-bottom: 0.5rem;
    font-weight: 700;
  }

  .error {
    margin-top: 0.5rem;
    font-size: 0.8125rem;
    color: #e20004;
  }
}

.validation_error {
  margin-top: 0.5rem;
  font-size: 0.8125rem;
  color: #e20004;
}

.validation {
  transition: all 0.3s ease;
  overflow: hidden;
}

.validation:empty {
  max-height: 0;
  opacity: 0;
  margin-top: 0;
}

.validation:not(:empty) {
  max-height: 100px;
  opacity: 1;
  margin-top: 0.5rem;
}

// Pico style overrides

@layer base {
  // Typography (h1–h6)
  h1 {
    font-size: 2rem;
    font-weight: 600;
    line-height: 1.2;
    margin: 0 0 1rem;
  }

  h2 {
    font-size: 1.75rem;
    font-weight: 600;
    line-height: 1.3;
    margin: 0 0 0.75rem;
  }

  h3 {
    font-size: 1.5rem;
    font-weight: 500;
    line-height: 1.4;
    margin: 0 0 0.5rem;
  }

  h4 {
    font-size: 1.25rem;
    font-weight: 500;
    margin: 0 0 0.5rem;
  }

  h5 {
    font-size: 1rem;
    font-weight: 500;
    margin: 0 0 0.5rem;
  }

  h6 {
    font-size: 0.875rem;
    font-weight: 500;
    margin: 0 0 0.5rem;
  }

  // Form elements
  input,
  textarea,
  select {
    padding: 0.75rem 1rem;
    border: 1px solid var(--gray-3, #999);
    border-radius: 0.375rem;
    font-size: 1rem;
    line-height: 1.5;
    background-color: var(--white, #fff);
    color: inherit;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  textarea {
    resize: vertical;
  }

  input:focus,
  textarea:focus,
  select:focus {
    outline: none;
    border-color: var(--primary, #009de0);
    box-shadow: 0 0 0 3px var(--primary-focus, rgba(3, 155, 229, 0.125));
  }

  button:hover {
    background-color: var(--primary-hover, #0288d1);
    cursor: pointer;
  }

  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  // Misc elements
  blockquote {
    padding: 1rem;
    border-left: 0.25rem solid var(--gray-3, #999);
    margin: 1rem 0;
    font-style: italic;
    color: #666;
  }

  ul,
  ol {
    padding-left: 1.5rem;
    margin-bottom: 1rem;
  }

  code {
    background-color: #f5f5f5;
    padding: 0.375rem 0.5rem;
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.9em;
    color: var(--code-color, #333);
  }
}

pre {
  background-color: #f6f8fa;
  color: #333;
  padding: 1rem;
  border-radius: 0.375rem;
  overflow-x: auto;
  font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
  font-size: 0.9rem;
  line-height: 1.5;
  margin: 1rem 0 2rem;
  border: 1px solid rgba(0, 0, 0, 0.05);

  code {
    display: block;
    padding: 1em;
    font-size: inherit;
    color: inherit;
    background: var(--gradientDarkblue);
  }
}

// Mobile styles
@media (max-width: 767px) {
  .mobile-chat-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
}

/* Radio Button */

.radio {
  gap: 1.5rem;
  padding-top: 1rem;
  @media (max-width: 767px) {
    flex-direction: column;
    gap: 1rem;
  }
}

.radio-option {
  position: relative;
  cursor: pointer;
}

.radio-input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
  margin: 0;
}

.radio-label {
  display: flex;
  align-items: center;
  padding: var(--form-element-spacing-vertical) 1.25rem
    var(--form-element-spacing-vertical) 3rem;
  border-radius: 10px;
  background: var(--gradientDarkblue);
  border: 2px solid transparent;
  color: #333333;
  font-weight: 500;
  font-size: 0.9rem;
  cursor: pointer;
  position: relative;
  min-height: 3rem;
  user-select: none;
  background-clip: padding-box;
  box-sizing: border-box;
  outline: none;

  &::after {
    content: "";
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    border: 2px solid var(--grey);
    border-radius: 50%;
    background: transparent;
    transition: all 0.2s ease;
  }
}

.radio-option:hover .radio-label {
  color: var(--red-crayola);

  &::after {
    border-color: var(--red-crayola);
  }
}

.radio-input:checked + .radio-label {
  color: #000000;
  font-weight: 600;
  border: 2px solid var(--red-crayola) !important;

  &::after {
    border-color: var(--red-crayola);
    background: var(--red-crayola);
    background-image: radial-gradient(
      circle,
      var(--deepNavy) 35%,
      transparent 35%
    );
  }
}

.radio-input:focus + .radio-label {
  outline: none !important;
}

.group-layout-item {
  margin-bottom: 2rem;
}

@media (max-width: 767px) {
  .radio-label {
    font-size: 0.95rem;
    min-height: 3.5rem;
  }

  .radio-option {
    width: 100%;
  }
}
</file>

<file path="src/styles/globals.css">
@import 'tailwindcss';
@import 'katex/dist/katex.min.css';

:root {
  --white: #ffffff; /* Define your white color */
  --gray-1: #cccccc; /* Example for light gray */
  --gray-3: #999999; /* Example for darker gray */
  --purple: #6a0dad; /* Example purple color */
  --purple-contrast: #8b5fc0; /* Example hover purple */
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Example shadow */
  --thumbs-up-bg: #0055c0;
  --thumbs-down-bg: #a93636;
}

/* Light theme (Default) */
[data-theme='light'],
:root:not([data-theme='dark']) {
  --primary: #730C16;
  --primary-hover: #5A0B0E;
  --primary-focus: rgba(115, 12, 22, 0.125);
  --primary-inverse: #fff;
  --background-color: #ffffff;
  --secondary-bg: #F5F5F5;
  --scrollbar-color: rgba(115, 12, 22, 0.3);

  --primary-text: #000000;
  --secondary-text: #333333;
  --tertiary-text: #666666;

  /* Chat Message Variables */
  --chat-message-bg: #ffffff;
  --chat-message-color: #000000;
  --chat-message-border: #F6BDB6;

  --chat-message-user-bg: #F6BDB6;
  --chat-message-user-color: #000000;

  --chat-message-assistant-bg: #FAFAFA;
  --chat-message-assistant-color: #000000;

  --artifact-bg: #F5F5F5;
  --artifact-bg-gray: #E8E8E8;
}


/* Light-blue (Common styles) */
:root {
  --form-element-active-border-color: var(--primary);
  --form-element-focus-color: var(--primary-focus);
  --switch-color: var(--primary-inverse);
  --switch-checked-background-color: var(--primary);
}

@media (min-width: 576px) {
  :root {
    --font-size: 16px;
    --container-width: 510px;
  }
}
@media (min-width: 768px) {
  :root {
    --font-size: 16px;
    --container-width: 700px;
  }
}
@media (min-width: 992px) {
  :root {
    --font-size: 17px;
    --container-width: 920px;
  }
}
@media (min-width: 1200px) {
  :root {
    --font-size: 17px;
    --container-width: 1130px;
  }
}
.chat-message {
  color: var(--chat-message-color);
  display: flex;
  width: 100%;
  border-radius: 1rem;
}

.chat-message.user {
  background-color: var(--chat-message-user-bg);
  color: var(--chat-message-user-color);
  width: fit-content;
  padding-right: 1rem;
  min-width: 200px;
  text-align: left;
  flex-direction: row;
}

.chat-message.assistant {
  color: var(--chat-message-assistant-color);
}

.markdown-chat {
  white-space: normal;
  p {
    margin-bottom: 0.5rem;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin-top: 1em;
    margin-bottom: 0.5em;
  }
  blockquote {
    margin: 0;
    padding: 0.5em 1em;
    border-left: 0.25em solid var(--primary-text);
  }
  a {
    color: #fe5000;
    text-decoration: underline;
    cursor: pointer;
  }
  a:hover {
    text-decoration: underline;
    opacity: 0.8;
  }
}

.markdown-chat ul {
  padding-left: 2em; /* Adjust this value to change the indentation of sublist items */
  margin-bottom: 0;
  list-style-type: disc;
}

.markdown-chat ol {
  padding-left: 2em;
  list-style: decimal;
  margin-bottom: 0;
}

.markdown-chat li {
  margin-bottom: 0.5em;
}

.markdown-chat pre {
  background: var(--gradientTurquoise) !important;
  border-radius: 10px !important;
  padding: 0 !important;
  margin: 1rem 0 2rem !important;
}

.markdown-chat pre code {
  display: block;
  color: var(--turquoise) !important;
  border-radius: 9px !important;
  background: var(--gradientDarkblue) !important;
  width: calc(100% - 3px) !important;
  height: calc(100% - 3px);
  margin: 1.5px;
  padding: 1rem;
  position: relative;
}

.hide-scrollbar {
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* Internet Explorer 10+ */
}
.hide-scrollbar::-webkit-scrollbar {
  display: none; /* WebKit */
}

.div.error {
  color: red !important;
  font-size: 0.2rem !important;
}

.shimmer-text {
  /* Put the text in an inline-block so the background can span just the text area */
  display: inline-block;
  /*
    Create a diagonal gradient with #666 for most of the text,
    except for a narrow band of #444 in the middle (the 'sweep').
    The stops at 45%–50%–55% define how wide that darker band is.
  */
  background: linear-gradient(80deg, #abaaaa 35%, #525151 50%, #abaaaa 65%);

  /* Make the gradient much wider than the text so we can animate it across */
  background-size: 200% 100%;
  background-position: 0 0;

  /*
    Normally, to see the gradient through the text, you must
    'clip' the background to the glyphs and set the text fill to transparent.
    This is okay, because the gradient includes the same gray (#666).
  */
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;

  /* Animate the gradient from far left to far right */
  animation: shimmer 8s linear infinite;
}

/* Move the gradient from left to right */
@keyframes shimmer {
  0% {
    background-position: 400% 0;
  }
  100% {
    background-position: -400% 0;
  }
}

input,
textarea {
  /* vertical padding = var(--pico-form-element-spacing-vertical) = 0.75rem */
  /* horizontal padding = var(--pico-form-element-spacing-horizontal) = 1rem */
  padding: 0.75rem 1rem;
}

/* Remove Pico’s focus outline/box-shadow so nothing “lights up” on focus */
input:focus,
textarea:focus {
  outline: none;
  box-shadow: none;
}
</file>

<file path="src/types/generic.ts">
export class NetworkingError {
  code: number | null;
  message: string;

  constructor(code: number | null, message: string) {
    this.code = code;
    this.message = message;
  }
}

export interface SourceDocument {
  id: string;
  filename: string;
  content: string;
  created?: Date;
  updated?: Date;
}

export interface Task {
  original_index: number;
  task_title: string;
  task_type: string;
  task_icon: string;
}
</file>

<file path="src/utils/asset.tsx">
export const getAssetImageUrl = (name: string): string => {
  return `/assets/images/${name}`;
};
</file>

<file path="src/config.ts">
import type { ForwardRefExoticComponent, SVGProps, RefAttributes } from "react";
import { UserCircleIcon } from "@heroicons/react/24/solid";
import { type FirebaseOptions } from "firebase/app";

interface AppConfig {
  agent: RoleConfig;
  user: RoleConfig;
  system: RoleConfig;
  firebaseConfig: FirebaseOptions;
}

interface RoleConfig {
  icon:
    | ForwardRefExoticComponent<
        Omit<SVGProps<SVGSVGElement>, "ref"> & {
          title?: string | undefined;
          titleId?: string | undefined;
        } & RefAttributes<SVGSVGElement>
      >
    | string;
  iconColor: string;
  roleName: string;
}

const config: AppConfig = {
  agent: {
    icon: "logo.png",
    iconColor: "text-[#730C16]",
    roleName: "Kireon GPT Assistant",
  },
  user: {
    icon: UserCircleIcon,
    iconColor: "text-[#730C16]",
    roleName: "You",
  },
  system: {
    icon: "agent-logo.svg",
    iconColor: "text-[#730C16]",
    roleName: "Agent",
  },
  firebaseConfig: {
    apiKey: "AIzaSyCzsOn795kYELai6AY2HEPP848wW2bw6yU",
    authDomain: "kireon-gpt.firebaseapp.com",
    projectId: "kireon-gpt",
    storageBucket: "kireon-gpt.firebasestorage.app",
    messagingSenderId: "510702145393",
    appId: "1:510702145393:web:ebf3812c13ec965d0270d0",
    measurementId: "G-CMW9Q7H77G"
  }
};

export function setIsProduction(isProd: boolean) {
  isProduction = isProd;
}
export let isProduction = false;

export default config;
</file>

<file path="src/middleware.ts">
import createMiddleware from "next-intl/middleware";
import { routing } from "./i18n/routing";

export default createMiddleware(routing);

export const config = {
  matcher: "/((?!api|trpc|_next|_vercel|.*\\..*).*)",
};
</file>

<file path=".dockerignore">
node_modules
.next
.dockerignore
Dockerfile
*.log
*.env
</file>

<file path=".env.example">
NEXT_PUBLIC_BACKEND_URL=https://hiring-agent-backend-staging-474483908861.europe-west3.run.app
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="docker-compose.yaml">
version: '3.8'

services:
  hiring-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: "http://localhost:8080"
    image: hiring-frontend:latest
    ports:
      - "3000:8080"
    restart: unless-stopped
</file>

<file path="Dockerfile">
FROM node:20-alpine AS deps

ARG NEXT_PUBLIC_BACKEND_URL
ENV NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_ALLOW_ANONYMOUS=true
ENV NEXT_PUBLIC_ALLOW_ANONYMOUS=$NEXT_PUBLIC_ALLOW_ANONYMOUS
RUN echo "NEXT_PUBLIC_BACKEND_URL is: $NEXT_PUBLIC_BACKEND_URL"

WORKDIR /app

COPY package.json yarn.lock ./

# Create .env file from build argument
RUN echo "NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL" > .env && \
    echo "NEXT_PUBLIC_ALLOW_ANONYMOUS=$NEXT_PUBLIC_ALLOW_ANONYMOUS" >> .env

RUN yarn install --frozen-lockfile

FROM node:20-alpine AS builder

ARG NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_ALLOW_ANONYMOUS=true
ENV NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL
ENV NEXT_PUBLIC_ALLOW_ANONYMOUS=$NEXT_PUBLIC_ALLOW_ANONYMOUS

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Create .env file from build argument
RUN echo "NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL" > .env && \
    echo "NEXT_PUBLIC_ALLOW_ANONYMOUS=$NEXT_PUBLIC_ALLOW_ANONYMOUS" >> .env

RUN yarn build

FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV PORT=8080
ENV NEXT_PUBLIC_ALLOW_ANONYMOUS=true



COPY --from=builder /app ./

EXPOSE 8080

CMD ["yarn", "start", "-p", "8080"]
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    files: ["**/*.ts", "**/*.tsx"],
    rules: {
      "@typescript-eslint/no-explicit-any": "off",
    },
  },
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const nextConfig: NextConfig = {
  output: "standalone",
};

const withNextIntl = createNextIntlPlugin();
export default withNextIntl(nextConfig);
</file>

<file path="openapi-ts.config.ts">
import { defineConfig } from "@hey-api/openapi-ts";

export default defineConfig({
  input:
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/openapi.json` ||
    "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app/openapi.json",
  output: "src/client",
  plugins: ["@hey-api/client-fetch"],
});
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

</files>
