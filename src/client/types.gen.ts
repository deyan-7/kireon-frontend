// This file is auto-generated by @hey-api/openapi-ts

/**
 * https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html
 */
export type AwsModelName = "bedrock-3.5-haiku" | "bedrock-3.5-sonnet";

/**
 * Info about an available agent.
 */
export type AgentInfo = {
  /**
   * Agent key.
   */
  key: string;
  /**
   * Description of the agent.
   */
  description: string;
};

/**
 * https://docs.anthropic.com/en/docs/about-claude/models#model-names
 */
export type AnthropicModelName =
  | "claude-3-haiku"
  | "claude-3.5-haiku"
  | "claude-3.5-sonnet";

/**
 * Azure OpenAI model names
 */
export type AzureOpenAiModelName = "azure-gpt-4o" | "azure-gpt-4o-mini";

export type ChatHistory = {
  messages: Array<ChatMessage>;
};

/**
 * Input for retrieving chat history.
 */
export type ChatHistoryInput = {
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id: string;
};

/**
 * Message in a chat.
 */
export type ChatMessage = {
  /**
   * Role of the message.
   */
  type: "human" | "ai" | "tool" | "custom" | "system";
  /**
   * Content of the message.
   */
  content: string;
  /**
   * Tool calls in the message.
   */
  tool_calls?: Array<ToolCall>;
  /**
   * Tool call that this message is responding to.
   */
  tool_call_id?: string | null;
  /**
   * Run ID of the message.
   */
  run_id?: string | null;
  /**
   * Response metadata. For example: response headers, logprobs, token counts.
   */
  response_metadata?: {
    [key: string]: unknown;
  };
  /**
   * Custom message data.
   */
  custom_data?: {
    [key: string]: unknown;
  };
};

/**
 * https://api-docs.deepseek.com/quick_start/pricing
 */
export type DeepseekModelName = "deepseek-chat";

/**
 * Fake model for testing.
 */
export type FakeModelName = "fake";

/**
 * Feedback for a run, to record to LangSmith.
 */
export type Feedback = {
  /**
   * Run ID to record feedback for.
   */
  run_id: string;
  /**
   * Feedback key.
   */
  key: string;
  /**
   * Feedback score.
   */
  score: number;
  /**
   * Additional feedback kwargs, passed to LangSmith.
   */
  kwargs?: {
    [key: string]: unknown;
  };
};

export type FeedbackResponse = {
  status?: "success";
};

/**
 * https://ai.google.dev/gemini-api/docs/models/gemini
 */
export type GoogleModelName = "gemini-1.5-pro" | "gemini-2.0-flash";

/**
 * https://console.groq.com/docs/models
 */
export type GroqModelName =
  | "llama-3.1-8b"
  | "llama-3.3-70b"
  | "meta-llama/llama-guard-4-12b";

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * https://ollama.com/search
 */
export type OllamaModelName = "ollama";

/**
 * https://platform.openai.com/docs/guides/text-generation
 */
export type OpenAiCompatibleName = "openai-compatible";

/**
 * https://platform.openai.com/docs/models/gpt-4o
 */
export type OpenAiModelName = "gpt-4o-mini" | "gpt-4o";

/**
 * Metadata about the service including available agents and models.
 */
export type ServiceMetadata = {
  /**
   * List of available agents.
   */
  agents: Array<AgentInfo>;
  /**
   * List of available LLMs.
   */
  models: Array<
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
  >;
  /**
   * Default agent used when none is specified.
   */
  default_agent: string;
  /**
   * Default model used when none is specified.
   */
  default_model:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName;
};

/**
 * User input for streaming the agent's response.
 */
export type StreamInput = {
  /**
   * User input to the agent.
   */
  message: string;
  /**
   * LLM Model to use for the agent.
   */
  model?:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
    | null;
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id?: string | null;
  /**
   * User ID to persist and continue a conversation across multiple threads.
   */
  user_id?: string | null;
  /**
   * Additional configuration to pass through to the agent
   */
  agent_config?: {
    [key: string]: unknown;
  };
  /**
   * Whether to stream LLM tokens to the client.
   */
  stream_tokens?: boolean;
};

/**
 * Represents a request to call a tool.
 */
export type ToolCall = {
  name: string;
  args: {
    [key: string]: unknown;
  };
  id: string | null;
  type?: "tool_call";
};

/**
 * Basic user input for the agent.
 */
export type UserInput = {
  /**
   * User input to the agent.
   */
  message: string;
  /**
   * LLM Model to use for the agent.
   */
  model?:
    | OpenAiModelName
    | OpenAiCompatibleName
    | AzureOpenAiModelName
    | DeepseekModelName
    | AnthropicModelName
    | GoogleModelName
    | VertexAiModelName
    | GroqModelName
    | AwsModelName
    | OllamaModelName
    | FakeModelName
    | null;
  /**
   * Thread ID to persist and continue a multi-turn conversation.
   */
  thread_id?: string | null;
  /**
   * User ID to persist and continue a conversation across multiple threads.
   */
  user_id?: string | null;
  /**
   * Additional configuration to pass through to the agent
   */
  agent_config?: {
    [key: string]: unknown;
  };
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

/**
 * https://ai.google.dev/gemini-api/docs/models/gemini
 */
export type VertexAiModelName =
  | "gemini-1.5-pro-002"
  | "gemini-2.0-flash"
  | "models/gemini-2.5-flash-preview-04-17"
  | "gemini-2.5-pro-preview-05-06"
  | "gemini-2.5-pro-exp-03-25";

export type InfoInfoGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/info";
};

export type InfoInfoGetResponses = {
  /**
   * Successful Response
   */
  200: ServiceMetadata;
};

export type InfoInfoGetResponse =
  InfoInfoGetResponses[keyof InfoInfoGetResponses];

export type InvokeInvokePostData = {
  body: UserInput;
  path?: never;
  query?: {
    agent_id?: string;
  };
  url: "/invoke";
};

export type InvokeInvokePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type InvokeInvokePostError =
  InvokeInvokePostErrors[keyof InvokeInvokePostErrors];

export type InvokeInvokePostResponses = {
  /**
   * Successful Response
   */
  200: ChatMessage;
};

export type InvokeInvokePostResponse =
  InvokeInvokePostResponses[keyof InvokeInvokePostResponses];

export type InvokeAgentIdInvokePostData = {
  body: UserInput;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/{agent_id}/invoke";
};

export type InvokeAgentIdInvokePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type InvokeAgentIdInvokePostError =
  InvokeAgentIdInvokePostErrors[keyof InvokeAgentIdInvokePostErrors];

export type InvokeAgentIdInvokePostResponses = {
  /**
   * Successful Response
   */
  200: ChatMessage;
};

export type InvokeAgentIdInvokePostResponse =
  InvokeAgentIdInvokePostResponses[keyof InvokeAgentIdInvokePostResponses];

export type StreamStreamPostData = {
  body: StreamInput;
  path?: never;
  query?: {
    agent_id?: string;
  };
  url: "/stream";
};

export type StreamStreamPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StreamStreamPostError =
  StreamStreamPostErrors[keyof StreamStreamPostErrors];

export type StreamStreamPostResponses = {
  /**
   * Server Sent Event Response
   */
  200: string;
};

export type StreamStreamPostResponse =
  StreamStreamPostResponses[keyof StreamStreamPostResponses];

export type StreamAgentIdStreamPostData = {
  body: StreamInput;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/{agent_id}/stream";
};

export type StreamAgentIdStreamPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StreamAgentIdStreamPostError =
  StreamAgentIdStreamPostErrors[keyof StreamAgentIdStreamPostErrors];

export type StreamAgentIdStreamPostResponses = {
  /**
   * Server Sent Event Response
   */
  200: string;
};

export type StreamAgentIdStreamPostResponse =
  StreamAgentIdStreamPostResponses[keyof StreamAgentIdStreamPostResponses];

export type FeedbackFeedbackPostData = {
  body: Feedback;
  path?: never;
  query?: never;
  url: "/feedback";
};

export type FeedbackFeedbackPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FeedbackFeedbackPostError =
  FeedbackFeedbackPostErrors[keyof FeedbackFeedbackPostErrors];

export type FeedbackFeedbackPostResponses = {
  /**
   * Successful Response
   */
  200: FeedbackResponse;
};

export type FeedbackFeedbackPostResponse =
  FeedbackFeedbackPostResponses[keyof FeedbackFeedbackPostResponses];

export type HistoryHistoryPostData = {
  body: ChatHistoryInput;
  path?: never;
  query?: never;
  url: "/history";
};

export type HistoryHistoryPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type HistoryHistoryPostError =
  HistoryHistoryPostErrors[keyof HistoryHistoryPostErrors];

export type HistoryHistoryPostResponses = {
  /**
   * Successful Response
   */
  200: ChatHistory;
};

export type HistoryHistoryPostResponse =
  HistoryHistoryPostResponses[keyof HistoryHistoryPostResponses];

export type HealthCheckHealthGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health";
};

export type HealthCheckHealthGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ReadinessReadinessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/readiness";
};

export type ReadinessReadinessGetResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type ReadinessReadinessGetResponse =
  ReadinessReadinessGetResponses[keyof ReadinessReadinessGetResponses];

export type ClientOptions = {
  baseUrl:
    | "https://hiring-agent-backend-staging-474483908861.europe-west3.run.app"
    | (string & {});
};
